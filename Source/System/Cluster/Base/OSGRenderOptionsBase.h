/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2002 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class RenderOptions
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#ifndef _OSGRENDEROPTIONSBASE_H_
#define _OSGRENDEROPTIONSBASE_H_
#ifdef __sgi
#pragma once
#endif


#include "OSGConfig.h"
#include "OSGSystemDef.h"

#include "OSGBaseTypes.h"
#include "OSGRefPtr.h"
#include "OSGCoredNodePtr.h"

#include "OSGAttachment.h" // Parent

#include "OSGBoolFields.h" // Statistic type
#include "OSGGLenumFields.h" // PolygonMode type
#include "OSGBoolFields.h" // TwoSidedLighting type
#include "OSGBoolFields.h" // SpecTexLighting type
#include "OSGBoolFields.h" // SortTrans type
#include "OSGBoolFields.h" // ZWriteTrans type
#include "OSGBoolFields.h" // LocalLights type
#include "OSGBoolFields.h" // CorrectTwoSidedLighting type
#include "OSGBoolFields.h" // OcclusionCulling type
#include "OSGInt32Fields.h" // OcclusionCullingMode type
#include "OSGUInt32Fields.h" // OcclusionCullingPixels type
#include "OSGUInt32Fields.h" // OcclusionCullingThreshold type
#include "OSGUInt32Fields.h" // MultiSample type
#include "OSGUInt32Fields.h" // MultiSampleFilterMode type
#include "OSGBoolFields.h" // Antialiasing type
#include "OSGReal32Fields.h" // AntialiasingDistance type
#include "OSGReal32Fields.h" // AntialiasingScale type
#include "OSGUInt32Fields.h" // AntialiasingTrigger type
#include "OSGBoolFields.h" // FrustumCulling type
#include "OSGBoolFields.h" // BackfaceCulling type
#include "OSGBoolFields.h" // SmallFeatureCulling type
#include "OSGInt32Fields.h" // SmallFeatureCullingMode type
#include "OSGReal32Fields.h" // SmallFeaturePixels type
#include "OSGUInt32Fields.h" // SmallFeatureThreshold type
#include "OSGBoolFields.h" // FirstFrame type
#include "OSGBoolFields.h" // DepthOnlyPass type
#include "OSGColor4fFields.h" // LightModelAmbient type
#include "OSGColor4fFields.h" // FogColor type
#include "OSGVec2fFields.h" // FogRange type
#include "OSGReal32Fields.h" // FogDensity type
#include "OSGInt32Fields.h" // FogMode type

#include "OSGRenderOptionsFields.h"

OSG_BEGIN_NAMESPACE

class RenderOptions;
class BinaryDataHandler;

//! \brief RenderOptions Base Class.

class OSG_SYSTEMLIB_DLLMAPPING RenderOptionsBase : public Attachment
{
  private:

    typedef Attachment    Inherited;

    /*==========================  PUBLIC  =================================*/
  public:

    typedef RenderOptionsPtr  Ptr;

    enum
    {
        StatisticFieldId                 = Inherited::NextFieldId,
        PolygonModeFieldId               = StatisticFieldId                 + 1,
        TwoSidedLightingFieldId          = PolygonModeFieldId               + 1,
        SpecTexLightingFieldId           = TwoSidedLightingFieldId          + 1,
        SortTransFieldId                 = SpecTexLightingFieldId           + 1,
        ZWriteTransFieldId               = SortTransFieldId                 + 1,
        LocalLightsFieldId               = ZWriteTransFieldId               + 1,
        CorrectTwoSidedLightingFieldId   = LocalLightsFieldId               + 1,
        OcclusionCullingFieldId          = CorrectTwoSidedLightingFieldId   + 1,
        OcclusionCullingModeFieldId      = OcclusionCullingFieldId          + 1,
        OcclusionCullingPixelsFieldId    = OcclusionCullingModeFieldId      + 1,
        OcclusionCullingThresholdFieldId = OcclusionCullingPixelsFieldId    + 1,
        MultiSampleFieldId               = OcclusionCullingThresholdFieldId + 1,
        MultiSampleFilterModeFieldId     = MultiSampleFieldId               + 1,
        AntialiasingFieldId              = MultiSampleFilterModeFieldId     + 1,
        AntialiasingDistanceFieldId      = AntialiasingFieldId              + 1,
        AntialiasingScaleFieldId         = AntialiasingDistanceFieldId      + 1,
        AntialiasingTriggerFieldId       = AntialiasingScaleFieldId         + 1,
        FrustumCullingFieldId            = AntialiasingTriggerFieldId       + 1,
        BackfaceCullingFieldId           = FrustumCullingFieldId            + 1,
        SmallFeatureCullingFieldId       = BackfaceCullingFieldId           + 1,
        SmallFeatureCullingModeFieldId   = SmallFeatureCullingFieldId       + 1,
        SmallFeaturePixelsFieldId        = SmallFeatureCullingModeFieldId   + 1,
        SmallFeatureThresholdFieldId     = SmallFeaturePixelsFieldId        + 1,
        FirstFrameFieldId                = SmallFeatureThresholdFieldId     + 1,
        DepthOnlyPassFieldId             = FirstFrameFieldId                + 1,
        LightModelAmbientFieldId         = DepthOnlyPassFieldId             + 1,
        FogColorFieldId                  = LightModelAmbientFieldId         + 1,
        FogRangeFieldId                  = FogColorFieldId                  + 1,
        FogDensityFieldId                = FogRangeFieldId                  + 1,
        FogModeFieldId                   = FogDensityFieldId                + 1,
        NextFieldId                      = FogModeFieldId                   + 1
    };

    static const OSG::BitVector StatisticFieldMask;
    static const OSG::BitVector PolygonModeFieldMask;
    static const OSG::BitVector TwoSidedLightingFieldMask;
    static const OSG::BitVector SpecTexLightingFieldMask;
    static const OSG::BitVector SortTransFieldMask;
    static const OSG::BitVector ZWriteTransFieldMask;
    static const OSG::BitVector LocalLightsFieldMask;
    static const OSG::BitVector CorrectTwoSidedLightingFieldMask;
    static const OSG::BitVector OcclusionCullingFieldMask;
    static const OSG::BitVector OcclusionCullingModeFieldMask;
    static const OSG::BitVector OcclusionCullingPixelsFieldMask;
    static const OSG::BitVector OcclusionCullingThresholdFieldMask;
    static const OSG::BitVector MultiSampleFieldMask;
    static const OSG::BitVector MultiSampleFilterModeFieldMask;
    static const OSG::BitVector AntialiasingFieldMask;
    static const OSG::BitVector AntialiasingDistanceFieldMask;
    static const OSG::BitVector AntialiasingScaleFieldMask;
    static const OSG::BitVector AntialiasingTriggerFieldMask;
    static const OSG::BitVector FrustumCullingFieldMask;
    static const OSG::BitVector BackfaceCullingFieldMask;
    static const OSG::BitVector SmallFeatureCullingFieldMask;
    static const OSG::BitVector SmallFeatureCullingModeFieldMask;
    static const OSG::BitVector SmallFeaturePixelsFieldMask;
    static const OSG::BitVector SmallFeatureThresholdFieldMask;
    static const OSG::BitVector FirstFrameFieldMask;
    static const OSG::BitVector DepthOnlyPassFieldMask;
    static const OSG::BitVector LightModelAmbientFieldMask;
    static const OSG::BitVector FogColorFieldMask;
    static const OSG::BitVector FogRangeFieldMask;
    static const OSG::BitVector FogDensityFieldMask;
    static const OSG::BitVector FogModeFieldMask;


    static const OSG::BitVector MTInfluenceMask;

    /*---------------------------------------------------------------------*/
    /*! \name                    Class Get                                 */
    /*! \{                                                                 */

    static        FieldContainerType &getClassType    (void); 
    static        UInt32              getClassTypeId  (void); 

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                FieldContainer Get                            */
    /*! \{                                                                 */

    virtual       FieldContainerType &getType  (void); 
    virtual const FieldContainerType &getType  (void) const; 

    virtual       UInt32              getContainerSize(void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */


           SFBool              *editSFStatistic      (void);
     const SFBool              *getSFStatistic      (void) const;
#ifndef OSG_2_PREP
           SFBool              *getSFStatistic      (void);
#endif

           SFGLenum            *editSFPolygonMode    (void);
     const SFGLenum            *getSFPolygonMode    (void) const;
#ifndef OSG_2_PREP
           SFGLenum            *getSFPolygonMode    (void);
#endif

           SFBool              *editSFTwoSidedLighting(void);
     const SFBool              *getSFTwoSidedLighting(void) const;
#ifndef OSG_2_PREP
           SFBool              *getSFTwoSidedLighting(void);
#endif

           SFBool              *editSFSpecTexLighting(void);
     const SFBool              *getSFSpecTexLighting(void) const;
#ifndef OSG_2_PREP
           SFBool              *getSFSpecTexLighting(void);
#endif

           SFBool              *editSFSortTrans      (void);
     const SFBool              *getSFSortTrans      (void) const;
#ifndef OSG_2_PREP
           SFBool              *getSFSortTrans      (void);
#endif

           SFBool              *editSFZWriteTrans    (void);
     const SFBool              *getSFZWriteTrans    (void) const;
#ifndef OSG_2_PREP
           SFBool              *getSFZWriteTrans    (void);
#endif

           SFBool              *editSFLocalLights    (void);
     const SFBool              *getSFLocalLights    (void) const;
#ifndef OSG_2_PREP
           SFBool              *getSFLocalLights    (void);
#endif

           SFBool              *editSFCorrectTwoSidedLighting(void);
     const SFBool              *getSFCorrectTwoSidedLighting(void) const;
#ifndef OSG_2_PREP
           SFBool              *getSFCorrectTwoSidedLighting(void);
#endif

           SFBool              *editSFOcclusionCulling(void);
     const SFBool              *getSFOcclusionCulling(void) const;
#ifndef OSG_2_PREP
           SFBool              *getSFOcclusionCulling(void);
#endif

           SFInt32             *editSFOcclusionCullingMode(void);
     const SFInt32             *getSFOcclusionCullingMode(void) const;
#ifndef OSG_2_PREP
           SFInt32             *getSFOcclusionCullingMode(void);
#endif

           SFUInt32            *editSFOcclusionCullingPixels(void);
     const SFUInt32            *getSFOcclusionCullingPixels(void) const;
#ifndef OSG_2_PREP
           SFUInt32            *getSFOcclusionCullingPixels(void);
#endif

           SFUInt32            *editSFOcclusionCullingThreshold(void);
     const SFUInt32            *getSFOcclusionCullingThreshold(void) const;
#ifndef OSG_2_PREP
           SFUInt32            *getSFOcclusionCullingThreshold(void);
#endif

           SFUInt32            *editSFMultiSample    (void);
     const SFUInt32            *getSFMultiSample    (void) const;
#ifndef OSG_2_PREP
           SFUInt32            *getSFMultiSample    (void);
#endif

           SFUInt32            *editSFMultiSampleFilterMode(void);
     const SFUInt32            *getSFMultiSampleFilterMode(void) const;
#ifndef OSG_2_PREP
           SFUInt32            *getSFMultiSampleFilterMode(void);
#endif

           SFBool              *editSFAntialiasing   (void);
     const SFBool              *getSFAntialiasing   (void) const;
#ifndef OSG_2_PREP
           SFBool              *getSFAntialiasing   (void);
#endif

           SFReal32            *editSFAntialiasingDistance(void);
     const SFReal32            *getSFAntialiasingDistance(void) const;
#ifndef OSG_2_PREP
           SFReal32            *getSFAntialiasingDistance(void);
#endif

           SFReal32            *editSFAntialiasingScale(void);
     const SFReal32            *getSFAntialiasingScale(void) const;
#ifndef OSG_2_PREP
           SFReal32            *getSFAntialiasingScale(void);
#endif

           SFUInt32            *editSFAntialiasingTrigger(void);
     const SFUInt32            *getSFAntialiasingTrigger(void) const;
#ifndef OSG_2_PREP
           SFUInt32            *getSFAntialiasingTrigger(void);
#endif

           SFBool              *editSFFrustumCulling (void);
     const SFBool              *getSFFrustumCulling (void) const;
#ifndef OSG_2_PREP
           SFBool              *getSFFrustumCulling (void);
#endif

           SFBool              *editSFBackfaceCulling(void);
     const SFBool              *getSFBackfaceCulling(void) const;
#ifndef OSG_2_PREP
           SFBool              *getSFBackfaceCulling(void);
#endif

           SFBool              *editSFSmallFeatureCulling(void);
     const SFBool              *getSFSmallFeatureCulling(void) const;
#ifndef OSG_2_PREP
           SFBool              *getSFSmallFeatureCulling(void);
#endif

           SFInt32             *editSFSmallFeatureCullingMode(void);
     const SFInt32             *getSFSmallFeatureCullingMode(void) const;
#ifndef OSG_2_PREP
           SFInt32             *getSFSmallFeatureCullingMode(void);
#endif

           SFReal32            *editSFSmallFeaturePixels(void);
     const SFReal32            *getSFSmallFeaturePixels(void) const;
#ifndef OSG_2_PREP
           SFReal32            *getSFSmallFeaturePixels(void);
#endif

           SFUInt32            *editSFSmallFeatureThreshold(void);
     const SFUInt32            *getSFSmallFeatureThreshold(void) const;
#ifndef OSG_2_PREP
           SFUInt32            *getSFSmallFeatureThreshold(void);
#endif

           SFBool              *editSFFirstFrame     (void);
     const SFBool              *getSFFirstFrame     (void) const;
#ifndef OSG_2_PREP
           SFBool              *getSFFirstFrame     (void);
#endif

           SFBool              *editSFDepthOnlyPass  (void);
     const SFBool              *getSFDepthOnlyPass  (void) const;
#ifndef OSG_2_PREP
           SFBool              *getSFDepthOnlyPass  (void);
#endif

           SFColor4f           *editSFLightModelAmbient(void);
     const SFColor4f           *getSFLightModelAmbient(void) const;
#ifndef OSG_2_PREP
           SFColor4f           *getSFLightModelAmbient(void);
#endif

           SFColor4f           *editSFFogColor       (void);
     const SFColor4f           *getSFFogColor       (void) const;
#ifndef OSG_2_PREP
           SFColor4f           *getSFFogColor       (void);
#endif

           SFVec2f             *editSFFogRange       (void);
     const SFVec2f             *getSFFogRange       (void) const;
#ifndef OSG_2_PREP
           SFVec2f             *getSFFogRange       (void);
#endif

           SFReal32            *editSFFogDensity     (void);
     const SFReal32            *getSFFogDensity     (void) const;
#ifndef OSG_2_PREP
           SFReal32            *getSFFogDensity     (void);
#endif

           SFInt32             *editSFFogMode        (void);
     const SFInt32             *getSFFogMode        (void) const;
#ifndef OSG_2_PREP
           SFInt32             *getSFFogMode        (void);
#endif


           bool                &editStatistic      (void);
     const bool                &getStatistic      (void) const;
#ifndef OSG_2_PREP
           bool                &getStatistic      (void);
#endif

           GLenum              &editPolygonMode    (void);
     const GLenum              &getPolygonMode    (void) const;
#ifndef OSG_2_PREP
           GLenum              &getPolygonMode    (void);
#endif

           bool                &editTwoSidedLighting(void);
     const bool                &getTwoSidedLighting(void) const;
#ifndef OSG_2_PREP
           bool                &getTwoSidedLighting(void);
#endif

           bool                &editSpecTexLighting(void);
     const bool                &getSpecTexLighting(void) const;
#ifndef OSG_2_PREP
           bool                &getSpecTexLighting(void);
#endif

           bool                &editSortTrans      (void);
     const bool                &getSortTrans      (void) const;
#ifndef OSG_2_PREP
           bool                &getSortTrans      (void);
#endif

           bool                &editZWriteTrans    (void);
     const bool                &getZWriteTrans    (void) const;
#ifndef OSG_2_PREP
           bool                &getZWriteTrans    (void);
#endif

           bool                &editLocalLights    (void);
     const bool                &getLocalLights    (void) const;
#ifndef OSG_2_PREP
           bool                &getLocalLights    (void);
#endif

           bool                &editCorrectTwoSidedLighting(void);
     const bool                &getCorrectTwoSidedLighting(void) const;
#ifndef OSG_2_PREP
           bool                &getCorrectTwoSidedLighting(void);
#endif

           bool                &editOcclusionCulling(void);
     const bool                &getOcclusionCulling(void) const;
#ifndef OSG_2_PREP
           bool                &getOcclusionCulling(void);
#endif

           Int32               &editOcclusionCullingMode(void);
     const Int32               &getOcclusionCullingMode(void) const;
#ifndef OSG_2_PREP
           Int32               &getOcclusionCullingMode(void);
#endif

           UInt32              &editOcclusionCullingPixels(void);
     const UInt32              &getOcclusionCullingPixels(void) const;
#ifndef OSG_2_PREP
           UInt32              &getOcclusionCullingPixels(void);
#endif

           UInt32              &editOcclusionCullingThreshold(void);
     const UInt32              &getOcclusionCullingThreshold(void) const;
#ifndef OSG_2_PREP
           UInt32              &getOcclusionCullingThreshold(void);
#endif

           UInt32              &editMultiSample    (void);
     const UInt32              &getMultiSample    (void) const;
#ifndef OSG_2_PREP
           UInt32              &getMultiSample    (void);
#endif

           UInt32              &editMultiSampleFilterMode(void);
     const UInt32              &getMultiSampleFilterMode(void) const;
#ifndef OSG_2_PREP
           UInt32              &getMultiSampleFilterMode(void);
#endif

           bool                &editAntialiasing   (void);
     const bool                &getAntialiasing   (void) const;
#ifndef OSG_2_PREP
           bool                &getAntialiasing   (void);
#endif

           Real32              &editAntialiasingDistance(void);
     const Real32              &getAntialiasingDistance(void) const;
#ifndef OSG_2_PREP
           Real32              &getAntialiasingDistance(void);
#endif

           Real32              &editAntialiasingScale(void);
     const Real32              &getAntialiasingScale(void) const;
#ifndef OSG_2_PREP
           Real32              &getAntialiasingScale(void);
#endif

           UInt32              &editAntialiasingTrigger(void);
     const UInt32              &getAntialiasingTrigger(void) const;
#ifndef OSG_2_PREP
           UInt32              &getAntialiasingTrigger(void);
#endif

           bool                &editFrustumCulling (void);
     const bool                &getFrustumCulling (void) const;
#ifndef OSG_2_PREP
           bool                &getFrustumCulling (void);
#endif

           bool                &editBackfaceCulling(void);
     const bool                &getBackfaceCulling(void) const;
#ifndef OSG_2_PREP
           bool                &getBackfaceCulling(void);
#endif

           bool                &editSmallFeatureCulling(void);
     const bool                &getSmallFeatureCulling(void) const;
#ifndef OSG_2_PREP
           bool                &getSmallFeatureCulling(void);
#endif

           Int32               &editSmallFeatureCullingMode(void);
     const Int32               &getSmallFeatureCullingMode(void) const;
#ifndef OSG_2_PREP
           Int32               &getSmallFeatureCullingMode(void);
#endif

           Real32              &editSmallFeaturePixels(void);
     const Real32              &getSmallFeaturePixels(void) const;
#ifndef OSG_2_PREP
           Real32              &getSmallFeaturePixels(void);
#endif

           UInt32              &editSmallFeatureThreshold(void);
     const UInt32              &getSmallFeatureThreshold(void) const;
#ifndef OSG_2_PREP
           UInt32              &getSmallFeatureThreshold(void);
#endif

           bool                &editFirstFrame     (void);
     const bool                &getFirstFrame     (void) const;
#ifndef OSG_2_PREP
           bool                &getFirstFrame     (void);
#endif

           bool                &editDepthOnlyPass  (void);
     const bool                &getDepthOnlyPass  (void) const;
#ifndef OSG_2_PREP
           bool                &getDepthOnlyPass  (void);
#endif

           Color4f             &editLightModelAmbient(void);
     const Color4f             &getLightModelAmbient(void) const;
#ifndef OSG_2_PREP
           Color4f             &getLightModelAmbient(void);
#endif

           Color4f             &editFogColor       (void);
     const Color4f             &getFogColor       (void) const;
#ifndef OSG_2_PREP
           Color4f             &getFogColor       (void);
#endif

           Vec2f               &editFogRange       (void);
     const Vec2f               &getFogRange       (void) const;
#ifndef OSG_2_PREP
           Vec2f               &getFogRange       (void);
#endif

           Real32              &editFogDensity     (void);
     const Real32              &getFogDensity     (void) const;
#ifndef OSG_2_PREP
           Real32              &getFogDensity     (void);
#endif

           Int32               &editFogMode        (void);
     const Int32               &getFogMode        (void) const;
#ifndef OSG_2_PREP
           Int32               &getFogMode        (void);
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */

     void setStatistic      ( const bool &value );
     void setPolygonMode    ( const GLenum &value );
     void setTwoSidedLighting( const bool &value );
     void setSpecTexLighting( const bool &value );
     void setSortTrans      ( const bool &value );
     void setZWriteTrans    ( const bool &value );
     void setLocalLights    ( const bool &value );
     void setCorrectTwoSidedLighting( const bool &value );
     void setOcclusionCulling( const bool &value );
     void setOcclusionCullingMode( const Int32 &value );
     void setOcclusionCullingPixels( const UInt32 &value );
     void setOcclusionCullingThreshold( const UInt32 &value );
     void setMultiSample    ( const UInt32 &value );
     void setMultiSampleFilterMode( const UInt32 &value );
     void setAntialiasing   ( const bool &value );
     void setAntialiasingDistance( const Real32 &value );
     void setAntialiasingScale( const Real32 &value );
     void setAntialiasingTrigger( const UInt32 &value );
     void setFrustumCulling ( const bool &value );
     void setBackfaceCulling( const bool &value );
     void setSmallFeatureCulling( const bool &value );
     void setSmallFeatureCullingMode( const Int32 &value );
     void setSmallFeaturePixels( const Real32 &value );
     void setSmallFeatureThreshold( const UInt32 &value );
     void setFirstFrame     ( const bool &value );
     void setDepthOnlyPass  ( const bool &value );
     void setLightModelAmbient( const Color4f &value );
     void setFogColor       ( const Color4f &value );
     void setFogRange       ( const Vec2f &value );
     void setFogDensity     ( const Real32 &value );
     void setFogMode        ( const Int32 &value );

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Binary Access                              */
    /*! \{                                                                 */

    virtual UInt32 getBinSize (const BitVector         &whichField);
    virtual void   copyToBin  (      BinaryDataHandler &pMem,
                               const BitVector         &whichField);
    virtual void   copyFromBin(      BinaryDataHandler &pMem,
                               const BitVector         &whichField);


    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Construction                               */
    /*! \{                                                                 */

    static  RenderOptionsPtr      create          (void); 
    static  RenderOptionsPtr      createEmpty     (void); 

    /*! \}                                                                 */

    /*---------------------------------------------------------------------*/
    /*! \name                       Copy                                   */
    /*! \{                                                                 */

    virtual FieldContainerPtr     shallowCopy     (void) const; 

    /*! \}                                                                 */
    /*=========================  PROTECTED  ===============================*/
  protected:

    /*---------------------------------------------------------------------*/
    /*! \name                      Fields                                  */
    /*! \{                                                                 */

    SFBool              _sfStatistic;
    SFGLenum            _sfPolygonMode;
    SFBool              _sfTwoSidedLighting;
    SFBool              _sfSpecTexLighting;
    SFBool              _sfSortTrans;
    SFBool              _sfZWriteTrans;
    SFBool              _sfLocalLights;
    SFBool              _sfCorrectTwoSidedLighting;
    SFBool              _sfOcclusionCulling;
    SFInt32             _sfOcclusionCullingMode;
    SFUInt32            _sfOcclusionCullingPixels;
    SFUInt32            _sfOcclusionCullingThreshold;
    SFUInt32            _sfMultiSample;
    SFUInt32            _sfMultiSampleFilterMode;
    SFBool              _sfAntialiasing;
    SFReal32            _sfAntialiasingDistance;
    SFReal32            _sfAntialiasingScale;
    SFUInt32            _sfAntialiasingTrigger;
    SFBool              _sfFrustumCulling;
    SFBool              _sfBackfaceCulling;
    SFBool              _sfSmallFeatureCulling;
    SFInt32             _sfSmallFeatureCullingMode;
    SFReal32            _sfSmallFeaturePixels;
    SFUInt32            _sfSmallFeatureThreshold;
    SFBool              _sfFirstFrame;
    SFBool              _sfDepthOnlyPass;
    SFColor4f           _sfLightModelAmbient;
    SFColor4f           _sfFogColor;
    SFVec2f             _sfFogRange;
    SFReal32            _sfFogDensity;
    SFInt32             _sfFogMode;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Constructors                               */
    /*! \{                                                                 */

    RenderOptionsBase(void);
    RenderOptionsBase(const RenderOptionsBase &source);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Destructors                                */
    /*! \{                                                                 */

    virtual ~RenderOptionsBase(void); 

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

#if !defined(OSG_FIXED_MFIELDSYNC)
    void executeSyncImpl(      RenderOptionsBase *pOther,
                         const BitVector         &whichField);

    virtual void   executeSync(      FieldContainer    &other,
                               const BitVector         &whichField);
#else
    void executeSyncImpl(      RenderOptionsBase *pOther,
                         const BitVector         &whichField,
                         const SyncInfo          &sInfo     );

    virtual void   executeSync(      FieldContainer    &other,
                               const BitVector         &whichField,
                               const SyncInfo          &sInfo);

    virtual void execBeginEdit     (const BitVector &whichField,
                                          UInt32     uiAspect,
                                          UInt32     uiContainerSize);

            void execBeginEditImpl (const BitVector &whichField,
                                          UInt32     uiAspect,
                                          UInt32     uiContainerSize);

    virtual void onDestroyAspect(UInt32 uiId, UInt32 uiAspect);
#endif

    /*! \}                                                                 */
    /*==========================  PRIVATE  ================================*/
  private:

    friend class FieldContainer;

    static FieldDescription   *_desc[];
    static FieldContainerType  _type;


    // prohibit default functions (move to 'public' if you need one)
    void operator =(const RenderOptionsBase &source);
};

//---------------------------------------------------------------------------
//   Exported Types
//---------------------------------------------------------------------------


typedef RenderOptionsBase *RenderOptionsBaseP;

typedef osgIF<RenderOptionsBase::isNodeCore,
              CoredNodePtr<RenderOptions>,
              FieldContainer::attempt_to_create_CoredNodePtr_on_non_NodeCore_FC
              >::_IRet RenderOptionsNodePtr;

typedef RefPtr<RenderOptionsPtr> RenderOptionsRefPtr;

OSG_END_NAMESPACE

#define OSGRENDEROPTIONSBASE_HEADER_CVSID "@(#)$Id: OSGRenderOptionsBase.h,v 1.15 2011/01/13 16:23:03 macnihilist Exp $"

#endif /* _OSGRENDEROPTIONSBASE_H_ */
