/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2002 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class FBOViewport
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#ifndef _OSGFBOVIEWPORTBASE_H_
#define _OSGFBOVIEWPORTBASE_H_
#ifdef __sgi
#pragma once
#endif


#include "OSGConfig.h"
#include "OSGSystemDef.h"

#include "OSGBaseTypes.h"
#include "OSGRefPtr.h"
#include "OSGCoredNodePtr.h"

#include "OSGViewport.h" // Parent

#include "OSGBoolFields.h" // Enabled type
#include "OSGNodeFields.h" // ExcludeNodes type
#include "OSGNodeFields.h" // RenderNodes type
#include "OSGTextureChunkFields.h" // Textures type
#include "OSGBoolFields.h" // FboOn type
#include "OSGInt32Fields.h" // StorageWidth type
#include "OSGInt32Fields.h" // StorageHeight type
#include "OSGBoolFields.h" // GenCubemaps type
#include "OSGBoolFields.h" // GenDepthmaps type
#include "OSGUInt32Fields.h" // FrameBufferIndex type
#include "OSGUInt32Fields.h" // DepthBufferIndex type
#include "OSGUInt32Fields.h" // StencilBufferIndex type
#include "OSGBoolFields.h" // Dirty type
#include "OSGBoolFields.h" // ReadBuffer type
#include "OSGBoolFields.h" // IgnoreCameraDecorators type
#include "OSGBoolFields.h" // FboOffIgnoreStorageSize type
#include "OSGInt32Fields.h" // ZOffset type

#include "OSGFBOViewportFields.h"

OSG_BEGIN_NAMESPACE

class FBOViewport;
class BinaryDataHandler;

//! \brief FBOViewport Base Class.

class OSG_SYSTEMLIB_DLLMAPPING FBOViewportBase : public Viewport
{
  private:

    typedef Viewport    Inherited;

    /*==========================  PUBLIC  =================================*/
  public:

    typedef FBOViewportPtr  Ptr;

    enum
    {
        EnabledFieldId                 = Inherited::NextFieldId,
        ExcludeNodesFieldId            = EnabledFieldId                 + 1,
        RenderNodesFieldId             = ExcludeNodesFieldId            + 1,
        TexturesFieldId                = RenderNodesFieldId             + 1,
        FboOnFieldId                   = TexturesFieldId                + 1,
        StorageWidthFieldId            = FboOnFieldId                   + 1,
        StorageHeightFieldId           = StorageWidthFieldId            + 1,
        GenCubemapsFieldId             = StorageHeightFieldId           + 1,
        GenDepthmapsFieldId            = GenCubemapsFieldId             + 1,
        FrameBufferIndexFieldId        = GenDepthmapsFieldId            + 1,
        DepthBufferIndexFieldId        = FrameBufferIndexFieldId        + 1,
        StencilBufferIndexFieldId      = DepthBufferIndexFieldId        + 1,
        DirtyFieldId                   = StencilBufferIndexFieldId      + 1,
        ReadBufferFieldId              = DirtyFieldId                   + 1,
        IgnoreCameraDecoratorsFieldId  = ReadBufferFieldId              + 1,
        FboOffIgnoreStorageSizeFieldId = IgnoreCameraDecoratorsFieldId  + 1,
        ZOffsetFieldId                 = FboOffIgnoreStorageSizeFieldId + 1,
        NextFieldId                    = ZOffsetFieldId                 + 1
    };

    static const OSG::BitVector EnabledFieldMask;
    static const OSG::BitVector ExcludeNodesFieldMask;
    static const OSG::BitVector RenderNodesFieldMask;
    static const OSG::BitVector TexturesFieldMask;
    static const OSG::BitVector FboOnFieldMask;
    static const OSG::BitVector StorageWidthFieldMask;
    static const OSG::BitVector StorageHeightFieldMask;
    static const OSG::BitVector GenCubemapsFieldMask;
    static const OSG::BitVector GenDepthmapsFieldMask;
    static const OSG::BitVector FrameBufferIndexFieldMask;
    static const OSG::BitVector DepthBufferIndexFieldMask;
    static const OSG::BitVector StencilBufferIndexFieldMask;
    static const OSG::BitVector DirtyFieldMask;
    static const OSG::BitVector ReadBufferFieldMask;
    static const OSG::BitVector IgnoreCameraDecoratorsFieldMask;
    static const OSG::BitVector FboOffIgnoreStorageSizeFieldMask;
    static const OSG::BitVector ZOffsetFieldMask;


    static const OSG::BitVector MTInfluenceMask;

    /*---------------------------------------------------------------------*/
    /*! \name                    Class Get                                 */
    /*! \{                                                                 */

    static        FieldContainerType &getClassType    (void); 
    static        UInt32              getClassTypeId  (void); 

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                FieldContainer Get                            */
    /*! \{                                                                 */

    virtual       FieldContainerType &getType  (void); 
    virtual const FieldContainerType &getType  (void) const; 

    virtual       UInt32              getContainerSize(void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */


           SFBool              *editSFEnabled        (void);
     const SFBool              *getSFEnabled        (void) const;
#ifndef OSG_2_PREP
           SFBool              *getSFEnabled        (void);
#endif

           MFNodePtr           *editMFExcludeNodes   (void);
     const MFNodePtr           *getMFExcludeNodes   (void) const;
#ifndef OSG_2_PREP
           MFNodePtr           *getMFExcludeNodes   (void);
#endif

           MFNodePtr           *editMFRenderNodes    (void);
     const MFNodePtr           *getMFRenderNodes    (void) const;
#ifndef OSG_2_PREP
           MFNodePtr           *getMFRenderNodes    (void);
#endif

           MFTextureChunkPtr   *editMFTextures       (void);
     const MFTextureChunkPtr   *getMFTextures       (void) const;
#ifndef OSG_2_PREP
           MFTextureChunkPtr   *getMFTextures       (void);
#endif

           SFBool              *editSFFboOn          (void);
     const SFBool              *getSFFboOn          (void) const;
#ifndef OSG_2_PREP
           SFBool              *getSFFboOn          (void);
#endif

           SFInt32             *editSFStorageWidth   (void);
     const SFInt32             *getSFStorageWidth   (void) const;
#ifndef OSG_2_PREP
           SFInt32             *getSFStorageWidth   (void);
#endif

           SFInt32             *editSFStorageHeight  (void);
     const SFInt32             *getSFStorageHeight  (void) const;
#ifndef OSG_2_PREP
           SFInt32             *getSFStorageHeight  (void);
#endif

           SFBool              *editSFGenCubemaps    (void);
     const SFBool              *getSFGenCubemaps    (void) const;
#ifndef OSG_2_PREP
           SFBool              *getSFGenCubemaps    (void);
#endif

           SFBool              *editSFGenDepthmaps   (void);
     const SFBool              *getSFGenDepthmaps   (void) const;
#ifndef OSG_2_PREP
           SFBool              *getSFGenDepthmaps   (void);
#endif

           SFBool              *editSFDirty          (void);
     const SFBool              *getSFDirty          (void) const;
#ifndef OSG_2_PREP
           SFBool              *getSFDirty          (void);
#endif

           SFBool              *editSFReadBuffer     (void);
     const SFBool              *getSFReadBuffer     (void) const;
#ifndef OSG_2_PREP
           SFBool              *getSFReadBuffer     (void);
#endif

           SFBool              *editSFIgnoreCameraDecorators(void);
     const SFBool              *getSFIgnoreCameraDecorators(void) const;
#ifndef OSG_2_PREP
           SFBool              *getSFIgnoreCameraDecorators(void);
#endif

           SFBool              *editSFFboOffIgnoreStorageSize(void);
     const SFBool              *getSFFboOffIgnoreStorageSize(void) const;
#ifndef OSG_2_PREP
           SFBool              *getSFFboOffIgnoreStorageSize(void);
#endif

           MFInt32             *editMFZOffset        (void);
     const MFInt32             *getMFZOffset        (void) const;
#ifndef OSG_2_PREP
           MFInt32             *getMFZOffset        (void);
#endif


           bool                &editEnabled        (void);
     const bool                &getEnabled        (void) const;
#ifndef OSG_2_PREP
           bool                &getEnabled        (void);
#endif

           bool                &editFboOn          (void);
     const bool                &getFboOn          (void) const;
#ifndef OSG_2_PREP
           bool                &getFboOn          (void);
#endif

           Int32               &editStorageWidth   (void);
     const Int32               &getStorageWidth   (void) const;
#ifndef OSG_2_PREP
           Int32               &getStorageWidth   (void);
#endif

           Int32               &editStorageHeight  (void);
     const Int32               &getStorageHeight  (void) const;
#ifndef OSG_2_PREP
           Int32               &getStorageHeight  (void);
#endif

           bool                &editGenCubemaps    (void);
     const bool                &getGenCubemaps    (void) const;
#ifndef OSG_2_PREP
           bool                &getGenCubemaps    (void);
#endif

           bool                &editGenDepthmaps   (void);
     const bool                &getGenDepthmaps   (void) const;
#ifndef OSG_2_PREP
           bool                &getGenDepthmaps   (void);
#endif




           bool                &editDirty          (void);
     const bool                &getDirty          (void) const;
#ifndef OSG_2_PREP
           bool                &getDirty          (void);
#endif

           bool                &editReadBuffer     (void);
     const bool                &getReadBuffer     (void) const;
#ifndef OSG_2_PREP
           bool                &getReadBuffer     (void);
#endif

           bool                &editIgnoreCameraDecorators(void);
     const bool                &getIgnoreCameraDecorators(void) const;
#ifndef OSG_2_PREP
           bool                &getIgnoreCameraDecorators(void);
#endif

           bool                &editFboOffIgnoreStorageSize(void);
     const bool                &getFboOffIgnoreStorageSize(void) const;
#ifndef OSG_2_PREP
           bool                &getFboOffIgnoreStorageSize(void);
#endif

           NodePtr             &editExcludeNodes   (const UInt32 index);
     const NodePtr             &getExcludeNodes   (const UInt32 index) const;
#ifndef OSG_2_PREP
           NodePtr             &getExcludeNodes   (const UInt32 index);
           MFNodePtr           &getExcludeNodes   (void);
     const MFNodePtr           &getExcludeNodes   (void) const;
#endif

           NodePtr             &editRenderNodes    (const UInt32 index);
     const NodePtr             &getRenderNodes    (const UInt32 index) const;
#ifndef OSG_2_PREP
           NodePtr             &getRenderNodes    (const UInt32 index);
           MFNodePtr           &getRenderNodes    (void);
     const MFNodePtr           &getRenderNodes    (void) const;
#endif

           TextureChunkPtr     &editTextures       (const UInt32 index);
     const TextureChunkPtr     &getTextures       (const UInt32 index) const;
#ifndef OSG_2_PREP
           TextureChunkPtr     &getTextures       (const UInt32 index);
           MFTextureChunkPtr   &getTextures       (void);
     const MFTextureChunkPtr   &getTextures       (void) const;
#endif

           Int32               &editZOffset        (const UInt32 index);
     const Int32               &getZOffset        (const UInt32 index) const;
#ifndef OSG_2_PREP
           Int32               &getZOffset        (const UInt32 index);
           MFInt32             &getZOffset        (void);
     const MFInt32             &getZOffset        (void) const;
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */

     void setEnabled        ( const bool &value );
     void setFboOn          ( const bool &value );
     void setStorageWidth   ( const Int32 &value );
     void setStorageHeight  ( const Int32 &value );
     void setGenCubemaps    ( const bool &value );
     void setGenDepthmaps   ( const bool &value );
     void setDirty          ( const bool &value );
     void setReadBuffer     ( const bool &value );
     void setIgnoreCameraDecorators( const bool &value );
     void setFboOffIgnoreStorageSize( const bool &value );

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Binary Access                              */
    /*! \{                                                                 */

    virtual UInt32 getBinSize (const BitVector         &whichField);
    virtual void   copyToBin  (      BinaryDataHandler &pMem,
                               const BitVector         &whichField);
    virtual void   copyFromBin(      BinaryDataHandler &pMem,
                               const BitVector         &whichField);


    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Construction                               */
    /*! \{                                                                 */

    static  FBOViewportPtr      create          (void); 
    static  FBOViewportPtr      createEmpty     (void); 

    /*! \}                                                                 */

    /*---------------------------------------------------------------------*/
    /*! \name                       Copy                                   */
    /*! \{                                                                 */

    virtual FieldContainerPtr     shallowCopy     (void) const; 

    /*! \}                                                                 */
    /*=========================  PROTECTED  ===============================*/
  protected:

    /*---------------------------------------------------------------------*/
    /*! \name                      Fields                                  */
    /*! \{                                                                 */

    SFBool              _sfEnabled;
    MFNodePtr           _mfExcludeNodes;
    MFNodePtr           _mfRenderNodes;
    MFTextureChunkPtr   _mfTextures;
    SFBool              _sfFboOn;
    SFInt32             _sfStorageWidth;
    SFInt32             _sfStorageHeight;
    SFBool              _sfGenCubemaps;
    SFBool              _sfGenDepthmaps;
    SFUInt32            _sfFrameBufferIndex;
    SFUInt32            _sfDepthBufferIndex;
    SFUInt32            _sfStencilBufferIndex;
    SFBool              _sfDirty;
    SFBool              _sfReadBuffer;
    SFBool              _sfIgnoreCameraDecorators;
    SFBool              _sfFboOffIgnoreStorageSize;
    MFInt32             _mfZOffset;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Constructors                               */
    /*! \{                                                                 */

    FBOViewportBase(void);
    FBOViewportBase(const FBOViewportBase &source);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Destructors                                */
    /*! \{                                                                 */

    virtual ~FBOViewportBase(void); 

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */

           SFUInt32            *editSFFrameBufferIndex(void);
     const SFUInt32            *getSFFrameBufferIndex(void) const;
#ifndef OSG_2_PREP
           SFUInt32            *getSFFrameBufferIndex(void);
#endif
           SFUInt32            *editSFDepthBufferIndex(void);
     const SFUInt32            *getSFDepthBufferIndex(void) const;
#ifndef OSG_2_PREP
           SFUInt32            *getSFDepthBufferIndex(void);
#endif
           SFUInt32            *editSFStencilBufferIndex(void);
     const SFUInt32            *getSFStencilBufferIndex(void) const;
#ifndef OSG_2_PREP
           SFUInt32            *getSFStencilBufferIndex(void);
#endif

           UInt32              &editFrameBufferIndex(void);
     const UInt32              &getFrameBufferIndex(void) const;
#ifndef OSG_2_PREP
           UInt32              &getFrameBufferIndex(void);
#endif
           UInt32              &editDepthBufferIndex(void);
     const UInt32              &getDepthBufferIndex(void) const;
#ifndef OSG_2_PREP
           UInt32              &getDepthBufferIndex(void);
#endif
           UInt32              &editStencilBufferIndex(void);
     const UInt32              &getStencilBufferIndex(void) const;
#ifndef OSG_2_PREP
           UInt32              &getStencilBufferIndex(void);
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */

     void setFrameBufferIndex(const UInt32 &value);
     void setDepthBufferIndex(const UInt32 &value);
     void setStencilBufferIndex(const UInt32 &value);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

#if !defined(OSG_FIXED_MFIELDSYNC)
    void executeSyncImpl(      FBOViewportBase *pOther,
                         const BitVector         &whichField);

    virtual void   executeSync(      FieldContainer    &other,
                               const BitVector         &whichField);
#else
    void executeSyncImpl(      FBOViewportBase *pOther,
                         const BitVector         &whichField,
                         const SyncInfo          &sInfo     );

    virtual void   executeSync(      FieldContainer    &other,
                               const BitVector         &whichField,
                               const SyncInfo          &sInfo);

    virtual void execBeginEdit     (const BitVector &whichField,
                                          UInt32     uiAspect,
                                          UInt32     uiContainerSize);

            void execBeginEditImpl (const BitVector &whichField,
                                          UInt32     uiAspect,
                                          UInt32     uiContainerSize);

    virtual void onDestroyAspect(UInt32 uiId, UInt32 uiAspect);
#endif

    /*! \}                                                                 */
    /*==========================  PRIVATE  ================================*/
  private:

    friend class FieldContainer;

    static FieldDescription   *_desc[];
    static FieldContainerType  _type;


    // prohibit default functions (move to 'public' if you need one)
    void operator =(const FBOViewportBase &source);
};

//---------------------------------------------------------------------------
//   Exported Types
//---------------------------------------------------------------------------


typedef FBOViewportBase *FBOViewportBaseP;

typedef osgIF<FBOViewportBase::isNodeCore,
              CoredNodePtr<FBOViewport>,
              FieldContainer::attempt_to_create_CoredNodePtr_on_non_NodeCore_FC
              >::_IRet FBOViewportNodePtr;

typedef RefPtr<FBOViewportPtr> FBOViewportRefPtr;

OSG_END_NAMESPACE

#define OSGFBOVIEWPORTBASE_HEADER_CVSID "@(#)$Id: OSGFBOViewportBase.h,v 1.7 2008/06/09 12:28:23 vossg Exp $"

#endif /* _OSGFBOVIEWPORTBASE_H_ */
