/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2002 by the OpenSG Forum                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class ParallelStereoCameraDecorator!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include "OSGConfig.h"

OSG_BEGIN_NAMESPACE


//! access the type of the class
inline
OSG::FieldContainerType &ParallelStereoCameraDecoratorBase::getClassType(void)
{
    return _type; 
} 

//! access the numerical type of the class
inline
OSG::UInt32 ParallelStereoCameraDecoratorBase::getClassTypeId(void) 
{
    return _type.getId(); 
} 

//! create a new instance of the class
inline
ParallelStereoCameraDecoratorPtr ParallelStereoCameraDecoratorBase::create(void) 
{
    ParallelStereoCameraDecoratorPtr fc; 

    if(getClassType().getPrototype() != OSG::NullFC) 
    {
        fc = ParallelStereoCameraDecoratorPtr::dcast(
            getClassType().getPrototype()-> shallowCopy()); 
    }
    
    return fc; 
}

//! create an empty new instance of the class, do not copy the prototype
inline
ParallelStereoCameraDecoratorPtr ParallelStereoCameraDecoratorBase::createEmpty(void) 
{ 
    ParallelStereoCameraDecoratorPtr returnValue; 
    
    newPtr(returnValue); 

    return returnValue; 
}


/*------------------------------ get -----------------------------------*/

//! Get the ParallelStereoCameraDecorator::_sfUser field.
inline
const SFNodePtr *ParallelStereoCameraDecoratorBase::getSFUser(void) const
{
    return &_sfUser;
}

//! Get the ParallelStereoCameraDecorator::_sfUser field.
inline
SFNodePtr *ParallelStereoCameraDecoratorBase::editSFUser(void)
{
    return &_sfUser;
}

#ifndef OSG_2_PREP
//! Get the ParallelStereoCameraDecorator::_sfUser field.
inline
SFNodePtr *ParallelStereoCameraDecoratorBase::getSFUser(void)
{
    return &_sfUser;
}
#endif

//! Get the ParallelStereoCameraDecorator::_sfEyeToScreenDistance field.
inline
const SFReal32 *ParallelStereoCameraDecoratorBase::getSFEyeToScreenDistance(void) const
{
    return &_sfEyeToScreenDistance;
}

//! Get the ParallelStereoCameraDecorator::_sfEyeToScreenDistance field.
inline
SFReal32 *ParallelStereoCameraDecoratorBase::editSFEyeToScreenDistance(void)
{
    return &_sfEyeToScreenDistance;
}

#ifndef OSG_2_PREP
//! Get the ParallelStereoCameraDecorator::_sfEyeToScreenDistance field.
inline
SFReal32 *ParallelStereoCameraDecoratorBase::getSFEyeToScreenDistance(void)
{
    return &_sfEyeToScreenDistance;
}
#endif

//! Get the ParallelStereoCameraDecorator::_sfLensSeparationDistance field.
inline
const SFReal32 *ParallelStereoCameraDecoratorBase::getSFLensSeparationDistance(void) const
{
    return &_sfLensSeparationDistance;
}

//! Get the ParallelStereoCameraDecorator::_sfLensSeparationDistance field.
inline
SFReal32 *ParallelStereoCameraDecoratorBase::editSFLensSeparationDistance(void)
{
    return &_sfLensSeparationDistance;
}

#ifndef OSG_2_PREP
//! Get the ParallelStereoCameraDecorator::_sfLensSeparationDistance field.
inline
SFReal32 *ParallelStereoCameraDecoratorBase::getSFLensSeparationDistance(void)
{
    return &_sfLensSeparationDistance;
}
#endif

//! Get the ParallelStereoCameraDecorator::_sfVScreenSize field.
inline
const SFReal32 *ParallelStereoCameraDecoratorBase::getSFVScreenSize(void) const
{
    return &_sfVScreenSize;
}

//! Get the ParallelStereoCameraDecorator::_sfVScreenSize field.
inline
SFReal32 *ParallelStereoCameraDecoratorBase::editSFVScreenSize(void)
{
    return &_sfVScreenSize;
}

#ifndef OSG_2_PREP
//! Get the ParallelStereoCameraDecorator::_sfVScreenSize field.
inline
SFReal32 *ParallelStereoCameraDecoratorBase::getSFVScreenSize(void)
{
    return &_sfVScreenSize;
}
#endif

//! Get the ParallelStereoCameraDecorator::_sfHScreenSize field.
inline
const SFReal32 *ParallelStereoCameraDecoratorBase::getSFHScreenSize(void) const
{
    return &_sfHScreenSize;
}

//! Get the ParallelStereoCameraDecorator::_sfHScreenSize field.
inline
SFReal32 *ParallelStereoCameraDecoratorBase::editSFHScreenSize(void)
{
    return &_sfHScreenSize;
}

#ifndef OSG_2_PREP
//! Get the ParallelStereoCameraDecorator::_sfHScreenSize field.
inline
SFReal32 *ParallelStereoCameraDecoratorBase::getSFHScreenSize(void)
{
    return &_sfHScreenSize;
}
#endif

//! Get the ParallelStereoCameraDecorator::_sfDistortionK field.
inline
const SFVec4f *ParallelStereoCameraDecoratorBase::getSFDistortionK(void) const
{
    return &_sfDistortionK;
}

//! Get the ParallelStereoCameraDecorator::_sfDistortionK field.
inline
SFVec4f *ParallelStereoCameraDecoratorBase::editSFDistortionK(void)
{
    return &_sfDistortionK;
}

#ifndef OSG_2_PREP
//! Get the ParallelStereoCameraDecorator::_sfDistortionK field.
inline
SFVec4f *ParallelStereoCameraDecoratorBase::getSFDistortionK(void)
{
    return &_sfDistortionK;
}
#endif

//! Get the ParallelStereoCameraDecorator::_sfFoVScale field.
inline
const SFReal32 *ParallelStereoCameraDecoratorBase::getSFFoVScale(void) const
{
    return &_sfFoVScale;
}

//! Get the ParallelStereoCameraDecorator::_sfFoVScale field.
inline
SFReal32 *ParallelStereoCameraDecoratorBase::editSFFoVScale(void)
{
    return &_sfFoVScale;
}

#ifndef OSG_2_PREP
//! Get the ParallelStereoCameraDecorator::_sfFoVScale field.
inline
SFReal32 *ParallelStereoCameraDecoratorBase::getSFFoVScale(void)
{
    return &_sfFoVScale;
}
#endif


//! Get the value of the ParallelStereoCameraDecorator::_sfUser field.
inline
NodePtr &ParallelStereoCameraDecoratorBase::editUser(void)
{
    return _sfUser.getValue();
}

//! Get the value of the ParallelStereoCameraDecorator::_sfUser field.
inline
const NodePtr &ParallelStereoCameraDecoratorBase::getUser(void) const
{
    return _sfUser.getValue();
}

#ifndef OSG_2_PREP
//! Get the value of the ParallelStereoCameraDecorator::_sfUser field.
inline
NodePtr &ParallelStereoCameraDecoratorBase::getUser(void)
{
    return _sfUser.getValue();
}
#endif

//! Set the value of the ParallelStereoCameraDecorator::_sfUser field.
inline
void ParallelStereoCameraDecoratorBase::setUser(const NodePtr &value)
{
    _sfUser.setValue(value);
}

//! Get the value of the ParallelStereoCameraDecorator::_sfEyeToScreenDistance field.
inline
Real32 &ParallelStereoCameraDecoratorBase::editEyeToScreenDistance(void)
{
    return _sfEyeToScreenDistance.getValue();
}

//! Get the value of the ParallelStereoCameraDecorator::_sfEyeToScreenDistance field.
inline
const Real32 &ParallelStereoCameraDecoratorBase::getEyeToScreenDistance(void) const
{
    return _sfEyeToScreenDistance.getValue();
}

#ifndef OSG_2_PREP
//! Get the value of the ParallelStereoCameraDecorator::_sfEyeToScreenDistance field.
inline
Real32 &ParallelStereoCameraDecoratorBase::getEyeToScreenDistance(void)
{
    return _sfEyeToScreenDistance.getValue();
}
#endif

//! Set the value of the ParallelStereoCameraDecorator::_sfEyeToScreenDistance field.
inline
void ParallelStereoCameraDecoratorBase::setEyeToScreenDistance(const Real32 &value)
{
    _sfEyeToScreenDistance.setValue(value);
}

//! Get the value of the ParallelStereoCameraDecorator::_sfLensSeparationDistance field.
inline
Real32 &ParallelStereoCameraDecoratorBase::editLensSeparationDistance(void)
{
    return _sfLensSeparationDistance.getValue();
}

//! Get the value of the ParallelStereoCameraDecorator::_sfLensSeparationDistance field.
inline
const Real32 &ParallelStereoCameraDecoratorBase::getLensSeparationDistance(void) const
{
    return _sfLensSeparationDistance.getValue();
}

#ifndef OSG_2_PREP
//! Get the value of the ParallelStereoCameraDecorator::_sfLensSeparationDistance field.
inline
Real32 &ParallelStereoCameraDecoratorBase::getLensSeparationDistance(void)
{
    return _sfLensSeparationDistance.getValue();
}
#endif

//! Set the value of the ParallelStereoCameraDecorator::_sfLensSeparationDistance field.
inline
void ParallelStereoCameraDecoratorBase::setLensSeparationDistance(const Real32 &value)
{
    _sfLensSeparationDistance.setValue(value);
}

//! Get the value of the ParallelStereoCameraDecorator::_sfVScreenSize field.
inline
Real32 &ParallelStereoCameraDecoratorBase::editVScreenSize(void)
{
    return _sfVScreenSize.getValue();
}

//! Get the value of the ParallelStereoCameraDecorator::_sfVScreenSize field.
inline
const Real32 &ParallelStereoCameraDecoratorBase::getVScreenSize(void) const
{
    return _sfVScreenSize.getValue();
}

#ifndef OSG_2_PREP
//! Get the value of the ParallelStereoCameraDecorator::_sfVScreenSize field.
inline
Real32 &ParallelStereoCameraDecoratorBase::getVScreenSize(void)
{
    return _sfVScreenSize.getValue();
}
#endif

//! Set the value of the ParallelStereoCameraDecorator::_sfVScreenSize field.
inline
void ParallelStereoCameraDecoratorBase::setVScreenSize(const Real32 &value)
{
    _sfVScreenSize.setValue(value);
}

//! Get the value of the ParallelStereoCameraDecorator::_sfHScreenSize field.
inline
Real32 &ParallelStereoCameraDecoratorBase::editHScreenSize(void)
{
    return _sfHScreenSize.getValue();
}

//! Get the value of the ParallelStereoCameraDecorator::_sfHScreenSize field.
inline
const Real32 &ParallelStereoCameraDecoratorBase::getHScreenSize(void) const
{
    return _sfHScreenSize.getValue();
}

#ifndef OSG_2_PREP
//! Get the value of the ParallelStereoCameraDecorator::_sfHScreenSize field.
inline
Real32 &ParallelStereoCameraDecoratorBase::getHScreenSize(void)
{
    return _sfHScreenSize.getValue();
}
#endif

//! Set the value of the ParallelStereoCameraDecorator::_sfHScreenSize field.
inline
void ParallelStereoCameraDecoratorBase::setHScreenSize(const Real32 &value)
{
    _sfHScreenSize.setValue(value);
}

//! Get the value of the ParallelStereoCameraDecorator::_sfDistortionK field.
inline
Vec4f &ParallelStereoCameraDecoratorBase::editDistortionK(void)
{
    return _sfDistortionK.getValue();
}

//! Get the value of the ParallelStereoCameraDecorator::_sfDistortionK field.
inline
const Vec4f &ParallelStereoCameraDecoratorBase::getDistortionK(void) const
{
    return _sfDistortionK.getValue();
}

#ifndef OSG_2_PREP
//! Get the value of the ParallelStereoCameraDecorator::_sfDistortionK field.
inline
Vec4f &ParallelStereoCameraDecoratorBase::getDistortionK(void)
{
    return _sfDistortionK.getValue();
}
#endif

//! Set the value of the ParallelStereoCameraDecorator::_sfDistortionK field.
inline
void ParallelStereoCameraDecoratorBase::setDistortionK(const Vec4f &value)
{
    _sfDistortionK.setValue(value);
}

//! Get the value of the ParallelStereoCameraDecorator::_sfFoVScale field.
inline
Real32 &ParallelStereoCameraDecoratorBase::editFoVScale(void)
{
    return _sfFoVScale.getValue();
}

//! Get the value of the ParallelStereoCameraDecorator::_sfFoVScale field.
inline
const Real32 &ParallelStereoCameraDecoratorBase::getFoVScale(void) const
{
    return _sfFoVScale.getValue();
}

#ifndef OSG_2_PREP
//! Get the value of the ParallelStereoCameraDecorator::_sfFoVScale field.
inline
Real32 &ParallelStereoCameraDecoratorBase::getFoVScale(void)
{
    return _sfFoVScale.getValue();
}
#endif

//! Set the value of the ParallelStereoCameraDecorator::_sfFoVScale field.
inline
void ParallelStereoCameraDecoratorBase::setFoVScale(const Real32 &value)
{
    _sfFoVScale.setValue(value);
}


OSG_END_NAMESPACE

#define OSGPARALLELSTEREOCAMERADECORATORBASE_INLINE_CVSID "@(#)$Id: OSGParallelStereoCameraDecoratorBase.inl,v 1.1 2014/06/30 07:37:39 vossg Exp $"

