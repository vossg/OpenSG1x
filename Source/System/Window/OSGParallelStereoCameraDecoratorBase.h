/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2002 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class ParallelStereoCameraDecorator
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#ifndef _OSGPARALLELSTEREOCAMERADECORATORBASE_H_
#define _OSGPARALLELSTEREOCAMERADECORATORBASE_H_
#ifdef __sgi
#pragma once
#endif


#include "OSGConfig.h"
#include "OSGSystemDef.h"

#include "OSGBaseTypes.h"
#include "OSGRefPtr.h"
#include "OSGCoredNodePtr.h"

#include "OSGStereoCameraDecorator.h" // Parent

#include "OSGNodeFields.h" // User type
#include "OSGReal32Fields.h" // EyeToScreenDistance type
#include "OSGReal32Fields.h" // LensSeparationDistance type
#include "OSGReal32Fields.h" // VScreenSize type
#include "OSGReal32Fields.h" // HScreenSize type
#include "OSGVec4fFields.h" // DistortionK type
#include "OSGReal32Fields.h" // FoVScale type

#include "OSGParallelStereoCameraDecoratorFields.h"

OSG_BEGIN_NAMESPACE

class ParallelStereoCameraDecorator;
class BinaryDataHandler;

//! \brief ParallelStereoCameraDecorator Base Class.

class OSG_SYSTEMLIB_DLLMAPPING ParallelStereoCameraDecoratorBase : public StereoCameraDecorator
{
  private:

    typedef StereoCameraDecorator    Inherited;

    /*==========================  PUBLIC  =================================*/
  public:

    typedef ParallelStereoCameraDecoratorPtr  Ptr;

    enum
    {
        UserFieldId                   = Inherited::NextFieldId,
        EyeToScreenDistanceFieldId    = UserFieldId                   + 1,
        LensSeparationDistanceFieldId = EyeToScreenDistanceFieldId    + 1,
        VScreenSizeFieldId            = LensSeparationDistanceFieldId + 1,
        HScreenSizeFieldId            = VScreenSizeFieldId            + 1,
        DistortionKFieldId            = HScreenSizeFieldId            + 1,
        FoVScaleFieldId               = DistortionKFieldId            + 1,
        NextFieldId                   = FoVScaleFieldId               + 1
    };

    static const OSG::BitVector UserFieldMask;
    static const OSG::BitVector EyeToScreenDistanceFieldMask;
    static const OSG::BitVector LensSeparationDistanceFieldMask;
    static const OSG::BitVector VScreenSizeFieldMask;
    static const OSG::BitVector HScreenSizeFieldMask;
    static const OSG::BitVector DistortionKFieldMask;
    static const OSG::BitVector FoVScaleFieldMask;


    static const OSG::BitVector MTInfluenceMask;

    /*---------------------------------------------------------------------*/
    /*! \name                    Class Get                                 */
    /*! \{                                                                 */

    static        FieldContainerType &getClassType    (void); 
    static        UInt32              getClassTypeId  (void); 

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                FieldContainer Get                            */
    /*! \{                                                                 */

    virtual       FieldContainerType &getType  (void); 
    virtual const FieldContainerType &getType  (void) const; 

    virtual       UInt32              getContainerSize(void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */


           SFNodePtr           *editSFUser           (void);
     const SFNodePtr           *getSFUser           (void) const;
#ifndef OSG_2_PREP
           SFNodePtr           *getSFUser           (void);
#endif

           SFReal32            *editSFEyeToScreenDistance(void);
     const SFReal32            *getSFEyeToScreenDistance(void) const;
#ifndef OSG_2_PREP
           SFReal32            *getSFEyeToScreenDistance(void);
#endif

           SFReal32            *editSFLensSeparationDistance(void);
     const SFReal32            *getSFLensSeparationDistance(void) const;
#ifndef OSG_2_PREP
           SFReal32            *getSFLensSeparationDistance(void);
#endif

           SFReal32            *editSFVScreenSize    (void);
     const SFReal32            *getSFVScreenSize    (void) const;
#ifndef OSG_2_PREP
           SFReal32            *getSFVScreenSize    (void);
#endif

           SFReal32            *editSFHScreenSize    (void);
     const SFReal32            *getSFHScreenSize    (void) const;
#ifndef OSG_2_PREP
           SFReal32            *getSFHScreenSize    (void);
#endif

           SFVec4f             *editSFDistortionK    (void);
     const SFVec4f             *getSFDistortionK    (void) const;
#ifndef OSG_2_PREP
           SFVec4f             *getSFDistortionK    (void);
#endif


           NodePtr             &editUser           (void);
     const NodePtr             &getUser           (void) const;
#ifndef OSG_2_PREP
           NodePtr             &getUser           (void);
#endif

           Real32              &editEyeToScreenDistance(void);
     const Real32              &getEyeToScreenDistance(void) const;
#ifndef OSG_2_PREP
           Real32              &getEyeToScreenDistance(void);
#endif

           Real32              &editLensSeparationDistance(void);
     const Real32              &getLensSeparationDistance(void) const;
#ifndef OSG_2_PREP
           Real32              &getLensSeparationDistance(void);
#endif

           Real32              &editVScreenSize    (void);
     const Real32              &getVScreenSize    (void) const;
#ifndef OSG_2_PREP
           Real32              &getVScreenSize    (void);
#endif

           Real32              &editHScreenSize    (void);
     const Real32              &getHScreenSize    (void) const;
#ifndef OSG_2_PREP
           Real32              &getHScreenSize    (void);
#endif

           Vec4f               &editDistortionK    (void);
     const Vec4f               &getDistortionK    (void) const;
#ifndef OSG_2_PREP
           Vec4f               &getDistortionK    (void);
#endif


    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */

     void setUser           ( const NodePtr &value );
     void setEyeToScreenDistance( const Real32 &value );
     void setLensSeparationDistance( const Real32 &value );
     void setVScreenSize    ( const Real32 &value );
     void setHScreenSize    ( const Real32 &value );
     void setDistortionK    ( const Vec4f &value );

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Binary Access                              */
    /*! \{                                                                 */

    virtual UInt32 getBinSize (const BitVector         &whichField);
    virtual void   copyToBin  (      BinaryDataHandler &pMem,
                               const BitVector         &whichField);
    virtual void   copyFromBin(      BinaryDataHandler &pMem,
                               const BitVector         &whichField);


    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Construction                               */
    /*! \{                                                                 */

    static  ParallelStereoCameraDecoratorPtr      create          (void); 
    static  ParallelStereoCameraDecoratorPtr      createEmpty     (void); 

    /*! \}                                                                 */

    /*---------------------------------------------------------------------*/
    /*! \name                       Copy                                   */
    /*! \{                                                                 */

    virtual FieldContainerPtr     shallowCopy     (void) const; 

    /*! \}                                                                 */
    /*=========================  PROTECTED  ===============================*/
  protected:

    /*---------------------------------------------------------------------*/
    /*! \name                      Fields                                  */
    /*! \{                                                                 */

    SFNodePtr           _sfUser;
    SFReal32            _sfEyeToScreenDistance;
    SFReal32            _sfLensSeparationDistance;
    SFReal32            _sfVScreenSize;
    SFReal32            _sfHScreenSize;
    SFVec4f             _sfDistortionK;
    SFReal32            _sfFoVScale;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Constructors                               */
    /*! \{                                                                 */

    ParallelStereoCameraDecoratorBase(void);
    ParallelStereoCameraDecoratorBase(const ParallelStereoCameraDecoratorBase &source);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Destructors                                */
    /*! \{                                                                 */

    virtual ~ParallelStereoCameraDecoratorBase(void); 

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */

           SFReal32            *editSFFoVScale       (void);
     const SFReal32            *getSFFoVScale       (void) const;
#ifndef OSG_2_PREP
           SFReal32            *getSFFoVScale       (void);
#endif

           Real32              &editFoVScale       (void);
     const Real32              &getFoVScale       (void) const;
#ifndef OSG_2_PREP
           Real32              &getFoVScale       (void);
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */

     void setFoVScale       (const Real32 &value);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

#if !defined(OSG_FIXED_MFIELDSYNC)
    void executeSyncImpl(      ParallelStereoCameraDecoratorBase *pOther,
                         const BitVector         &whichField);

    virtual void   executeSync(      FieldContainer    &other,
                               const BitVector         &whichField);
#else
    void executeSyncImpl(      ParallelStereoCameraDecoratorBase *pOther,
                         const BitVector         &whichField,
                         const SyncInfo          &sInfo     );

    virtual void   executeSync(      FieldContainer    &other,
                               const BitVector         &whichField,
                               const SyncInfo          &sInfo);

    virtual void execBeginEdit     (const BitVector &whichField,
                                          UInt32     uiAspect,
                                          UInt32     uiContainerSize);

            void execBeginEditImpl (const BitVector &whichField,
                                          UInt32     uiAspect,
                                          UInt32     uiContainerSize);

    virtual void onDestroyAspect(UInt32 uiId, UInt32 uiAspect);
#endif

    /*! \}                                                                 */
    /*==========================  PRIVATE  ================================*/
  private:

    friend class FieldContainer;

    static FieldDescription   *_desc[];
    static FieldContainerType  _type;


    // prohibit default functions (move to 'public' if you need one)
    void operator =(const ParallelStereoCameraDecoratorBase &source);
};

//---------------------------------------------------------------------------
//   Exported Types
//---------------------------------------------------------------------------


typedef ParallelStereoCameraDecoratorBase *ParallelStereoCameraDecoratorBaseP;

typedef osgIF<ParallelStereoCameraDecoratorBase::isNodeCore,
              CoredNodePtr<ParallelStereoCameraDecorator>,
              FieldContainer::attempt_to_create_CoredNodePtr_on_non_NodeCore_FC
              >::_IRet ParallelStereoCameraDecoratorNodePtr;

typedef RefPtr<ParallelStereoCameraDecoratorPtr> ParallelStereoCameraDecoratorRefPtr;

OSG_END_NAMESPACE

#define OSGPARALLELSTEREOCAMERADECORATORBASE_HEADER_CVSID "@(#)$Id: OSGParallelStereoCameraDecoratorBase.h,v 1.1 2014/06/30 07:37:39 vossg Exp $"

#endif /* _OSGPARALLELSTEREOCAMERADECORATORBASE_H_ */
