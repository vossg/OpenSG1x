/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2002 by the OpenSG Forum                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class Window!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include "OSGConfig.h"

OSG_BEGIN_NAMESPACE


//! access the type of the class
inline
OSG::FieldContainerType &WindowBase::getClassType(void)
{
    return _type; 
} 

//! access the numerical type of the class
inline
OSG::UInt32 WindowBase::getClassTypeId(void) 
{
    return _type.getId(); 
} 


/*------------------------------ get -----------------------------------*/

//! Get the Window::_sfWidth field.
inline
const SFUInt16 *WindowBase::getSFWidth(void) const
{
    return &_sfWidth;
}

//! Get the Window::_sfWidth field.
inline
SFUInt16 *WindowBase::editSFWidth(void)
{
    return &_sfWidth;
}

#ifndef OSG_2_PREP
//! Get the Window::_sfWidth field.
inline
SFUInt16 *WindowBase::getSFWidth(void)
{
    return &_sfWidth;
}
#endif

//! Get the Window::_sfHeight field.
inline
const SFUInt16 *WindowBase::getSFHeight(void) const
{
    return &_sfHeight;
}

//! Get the Window::_sfHeight field.
inline
SFUInt16 *WindowBase::editSFHeight(void)
{
    return &_sfHeight;
}

#ifndef OSG_2_PREP
//! Get the Window::_sfHeight field.
inline
SFUInt16 *WindowBase::getSFHeight(void)
{
    return &_sfHeight;
}
#endif

//! Get the Window::_mfPort field.
inline
const MFViewportPtr *WindowBase::getMFPort(void) const
{
    return &_mfPort;
}

//! Get the Window::_mfPort field.
inline
MFViewportPtr *WindowBase::editMFPort(void)
{
    return &_mfPort;
}

#ifndef OSG_2_PREP
//! Get the Window::_mfPort field.
inline
MFViewportPtr *WindowBase::getMFPort(void)
{
    return &_mfPort;
}
#endif

//! Get the Window::_sfResizePending field.
inline
const SFBool *WindowBase::getSFResizePending(void) const
{
    return &_sfResizePending;
}

//! Get the Window::_sfResizePending field.
inline
SFBool *WindowBase::editSFResizePending(void)
{
    return &_sfResizePending;
}

#ifndef OSG_2_PREP
//! Get the Window::_sfResizePending field.
inline
SFBool *WindowBase::getSFResizePending(void)
{
    return &_sfResizePending;
}
#endif

//! Get the Window::_sfGlObjectEventCounter field.
inline
const SFUInt32 *WindowBase::getSFGlObjectEventCounter(void) const
{
    return &_sfGlObjectEventCounter;
}

//! Get the Window::_sfGlObjectEventCounter field.
inline
SFUInt32 *WindowBase::editSFGlObjectEventCounter(void)
{
    return &_sfGlObjectEventCounter;
}

#ifndef OSG_2_PREP
//! Get the Window::_sfGlObjectEventCounter field.
inline
SFUInt32 *WindowBase::getSFGlObjectEventCounter(void)
{
    return &_sfGlObjectEventCounter;
}
#endif

//! Get the Window::_mfGlObjectLastRefresh field.
inline
const MFUInt32 *WindowBase::getMFGlObjectLastRefresh(void) const
{
    return &_mfGlObjectLastRefresh;
}

//! Get the Window::_mfGlObjectLastRefresh field.
inline
MFUInt32 *WindowBase::editMFGlObjectLastRefresh(void)
{
    return &_mfGlObjectLastRefresh;
}

#ifndef OSG_2_PREP
//! Get the Window::_mfGlObjectLastRefresh field.
inline
MFUInt32 *WindowBase::getMFGlObjectLastRefresh(void)
{
    return &_mfGlObjectLastRefresh;
}
#endif

//! Get the Window::_mfGlObjectLastReinitialize field.
inline
const MFUInt32 *WindowBase::getMFGlObjectLastReinitialize(void) const
{
    return &_mfGlObjectLastReinitialize;
}

//! Get the Window::_mfGlObjectLastReinitialize field.
inline
MFUInt32 *WindowBase::editMFGlObjectLastReinitialize(void)
{
    return &_mfGlObjectLastReinitialize;
}

#ifndef OSG_2_PREP
//! Get the Window::_mfGlObjectLastReinitialize field.
inline
MFUInt32 *WindowBase::getMFGlObjectLastReinitialize(void)
{
    return &_mfGlObjectLastReinitialize;
}
#endif


//! Get the value of the Window::_sfWidth field.
inline
UInt16 &WindowBase::editWidth(void)
{
    return _sfWidth.getValue();
}

//! Get the value of the Window::_sfWidth field.
inline
const UInt16 &WindowBase::getWidth(void) const
{
    return _sfWidth.getValue();
}

#ifndef OSG_2_PREP
//! Get the value of the Window::_sfWidth field.
inline
UInt16 &WindowBase::getWidth(void)
{
    return _sfWidth.getValue();
}
#endif

//! Set the value of the Window::_sfWidth field.
inline
void WindowBase::setWidth(const UInt16 &value)
{
    _sfWidth.setValue(value);
}

//! Get the value of the Window::_sfHeight field.
inline
UInt16 &WindowBase::editHeight(void)
{
    return _sfHeight.getValue();
}

//! Get the value of the Window::_sfHeight field.
inline
const UInt16 &WindowBase::getHeight(void) const
{
    return _sfHeight.getValue();
}

#ifndef OSG_2_PREP
//! Get the value of the Window::_sfHeight field.
inline
UInt16 &WindowBase::getHeight(void)
{
    return _sfHeight.getValue();
}
#endif

//! Set the value of the Window::_sfHeight field.
inline
void WindowBase::setHeight(const UInt16 &value)
{
    _sfHeight.setValue(value);
}

//! Get the value of the Window::_sfResizePending field.
inline
bool &WindowBase::editResizePending(void)
{
    return _sfResizePending.getValue();
}

//! Get the value of the Window::_sfResizePending field.
inline
const bool &WindowBase::getResizePending(void) const
{
    return _sfResizePending.getValue();
}

#ifndef OSG_2_PREP
//! Get the value of the Window::_sfResizePending field.
inline
bool &WindowBase::getResizePending(void)
{
    return _sfResizePending.getValue();
}
#endif

//! Set the value of the Window::_sfResizePending field.
inline
void WindowBase::setResizePending(const bool &value)
{
    _sfResizePending.setValue(value);
}

//! Get the value of the Window::_sfGlObjectEventCounter field.
inline
UInt32 &WindowBase::editGlObjectEventCounter(void)
{
    return _sfGlObjectEventCounter.getValue();
}

//! Get the value of the Window::_sfGlObjectEventCounter field.
inline
const UInt32 &WindowBase::getGlObjectEventCounter(void) const
{
    return _sfGlObjectEventCounter.getValue();
}

#ifndef OSG_2_PREP
//! Get the value of the Window::_sfGlObjectEventCounter field.
inline
UInt32 &WindowBase::getGlObjectEventCounter(void)
{
    return _sfGlObjectEventCounter.getValue();
}
#endif

//! Set the value of the Window::_sfGlObjectEventCounter field.
inline
void WindowBase::setGlObjectEventCounter(const UInt32 &value)
{
    _sfGlObjectEventCounter.setValue(value);
}


//! Get the value of the \a index element the Window::_mfPort field.
inline
ViewportPtr &WindowBase::editPort(const UInt32 index)
{
    return _mfPort[index];
}

//! Get the value of the \a index element the Window::_mfPort field.
inline
const ViewportPtr &WindowBase::getPort(const UInt32 index) const
{
    return _mfPort[index];
}

#ifndef OSG_2_PREP
//! Get the value of the \a index element the Window::_mfPort field.
inline
ViewportPtr &WindowBase::getPort(const UInt32 index)
{
    return _mfPort[index];
}

//! Get the Window::_mfPort field.
inline
MFViewportPtr &WindowBase::getPort(void)
{
    return _mfPort;
}

//! Get the Window::_mfPort field.
inline
const MFViewportPtr &WindowBase::getPort(void) const
{
    return _mfPort;
}

#endif

//! Get the value of the \a index element the Window::_mfGlObjectLastRefresh field.
inline
UInt32 &WindowBase::editGlObjectLastRefresh(const UInt32 index)
{
    return _mfGlObjectLastRefresh[index];
}

//! Get the value of the \a index element the Window::_mfGlObjectLastRefresh field.
inline
const UInt32 &WindowBase::getGlObjectLastRefresh(const UInt32 index) const
{
    return _mfGlObjectLastRefresh[index];
}

#ifndef OSG_2_PREP
//! Get the value of the \a index element the Window::_mfGlObjectLastRefresh field.
inline
UInt32 &WindowBase::getGlObjectLastRefresh(const UInt32 index)
{
    return _mfGlObjectLastRefresh[index];
}

//! Get the Window::_mfGlObjectLastRefresh field.
inline
MFUInt32 &WindowBase::getGlObjectLastRefresh(void)
{
    return _mfGlObjectLastRefresh;
}

//! Get the Window::_mfGlObjectLastRefresh field.
inline
const MFUInt32 &WindowBase::getGlObjectLastRefresh(void) const
{
    return _mfGlObjectLastRefresh;
}

#endif

//! Get the value of the \a index element the Window::_mfGlObjectLastReinitialize field.
inline
UInt32 &WindowBase::editGlObjectLastReinitialize(const UInt32 index)
{
    return _mfGlObjectLastReinitialize[index];
}

//! Get the value of the \a index element the Window::_mfGlObjectLastReinitialize field.
inline
const UInt32 &WindowBase::getGlObjectLastReinitialize(const UInt32 index) const
{
    return _mfGlObjectLastReinitialize[index];
}

#ifndef OSG_2_PREP
//! Get the value of the \a index element the Window::_mfGlObjectLastReinitialize field.
inline
UInt32 &WindowBase::getGlObjectLastReinitialize(const UInt32 index)
{
    return _mfGlObjectLastReinitialize[index];
}

//! Get the Window::_mfGlObjectLastReinitialize field.
inline
MFUInt32 &WindowBase::getGlObjectLastReinitialize(void)
{
    return _mfGlObjectLastReinitialize;
}

//! Get the Window::_mfGlObjectLastReinitialize field.
inline
const MFUInt32 &WindowBase::getGlObjectLastReinitialize(void) const
{
    return _mfGlObjectLastReinitialize;
}

#endif

OSG_END_NAMESPACE

#define OSGWINDOWBASE_INLINE_CVSID "@(#)$Id: FCBaseTemplate_inl.h,v 1.21 2008/06/09 07:30:44 vossg Exp $"

