/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2002 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class Geometry
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#ifndef _OSGGEOMETRYBASE_H_
#define _OSGGEOMETRYBASE_H_
#ifdef __sgi
#pragma once
#endif


#include "OSGConfig.h"
#include "OSGSystemDef.h"

#include "OSGBaseTypes.h"
#include "OSGRefPtr.h"
#include "OSGCoredNodePtr.h"

#include "OSGMaterialDrawable.h" // Parent

#include "OSGGeoPTypesFields.h" // Types type
#include "OSGGeoPLengthsFields.h" // Lengths type
#include "OSGGeoPositionsFields.h" // Positions type
#include "OSGGeoNormalsFields.h" // Normals type
#include "OSGGeoColorsFields.h" // Colors type
#include "OSGGeoColorsFields.h" // SecondaryColors type
#include "OSGGeoTexCoordsFields.h" // TexCoords type
#include "OSGGeoTexCoordsFields.h" // TexCoords1 type
#include "OSGGeoTexCoordsFields.h" // TexCoords2 type
#include "OSGGeoTexCoordsFields.h" // TexCoords3 type
#include "OSGGeoTexCoordsFields.h" // TexCoords4 type
#include "OSGGeoTexCoordsFields.h" // TexCoords5 type
#include "OSGGeoTexCoordsFields.h" // TexCoords6 type
#include "OSGGeoTexCoordsFields.h" // TexCoords7 type
#include "OSGGeoIndicesFields.h" // Indices type
#include "OSGUInt16Fields.h" // IndexMapping type
#include "OSGBoolFields.h" // DlistCache type
#include "OSGInt32Fields.h" // GLId type
#include "OSGInt32Fields.h" // IgnoreGLForAspect type
#include "OSGUInt32Fields.h" // Minindex type
#include "OSGUInt32Fields.h" // Maxindex type
#include "OSGUInt32Fields.h" // Lowindices type
#include "OSGUInt32Fields.h" // Highindices type
#include "OSGBoolFields.h" // Vbo type

#include "OSGGeometryFields.h"

OSG_BEGIN_NAMESPACE

class Geometry;
class BinaryDataHandler;

//! \brief Geometry Base Class.

class OSG_SYSTEMLIB_DLLMAPPING GeometryBase : public MaterialDrawable
{
  private:

    typedef MaterialDrawable    Inherited;

    /*==========================  PUBLIC  =================================*/
  public:

    typedef GeometryPtr  Ptr;

    enum
    {
        TypesFieldId             = Inherited::NextFieldId,
        LengthsFieldId           = TypesFieldId             + 1,
        PositionsFieldId         = LengthsFieldId           + 1,
        NormalsFieldId           = PositionsFieldId         + 1,
        ColorsFieldId            = NormalsFieldId           + 1,
        SecondaryColorsFieldId   = ColorsFieldId            + 1,
        TexCoordsFieldId         = SecondaryColorsFieldId   + 1,
        TexCoords1FieldId        = TexCoordsFieldId         + 1,
        TexCoords2FieldId        = TexCoords1FieldId        + 1,
        TexCoords3FieldId        = TexCoords2FieldId        + 1,
        TexCoords4FieldId        = TexCoords3FieldId        + 1,
        TexCoords5FieldId        = TexCoords4FieldId        + 1,
        TexCoords6FieldId        = TexCoords5FieldId        + 1,
        TexCoords7FieldId        = TexCoords6FieldId        + 1,
        IndicesFieldId           = TexCoords7FieldId        + 1,
        IndexMappingFieldId      = IndicesFieldId           + 1,
        DlistCacheFieldId        = IndexMappingFieldId      + 1,
        GLIdFieldId              = DlistCacheFieldId        + 1,
        IgnoreGLForAspectFieldId = GLIdFieldId              + 1,
        MinindexFieldId          = IgnoreGLForAspectFieldId + 1,
        MaxindexFieldId          = MinindexFieldId          + 1,
        LowindicesFieldId        = MaxindexFieldId          + 1,
        HighindicesFieldId       = LowindicesFieldId        + 1,
        VboFieldId               = HighindicesFieldId       + 1,
        NextFieldId              = VboFieldId               + 1
    };

    static const OSG::BitVector TypesFieldMask;
    static const OSG::BitVector LengthsFieldMask;
    static const OSG::BitVector PositionsFieldMask;
    static const OSG::BitVector NormalsFieldMask;
    static const OSG::BitVector ColorsFieldMask;
    static const OSG::BitVector SecondaryColorsFieldMask;
    static const OSG::BitVector TexCoordsFieldMask;
    static const OSG::BitVector TexCoords1FieldMask;
    static const OSG::BitVector TexCoords2FieldMask;
    static const OSG::BitVector TexCoords3FieldMask;
    static const OSG::BitVector TexCoords4FieldMask;
    static const OSG::BitVector TexCoords5FieldMask;
    static const OSG::BitVector TexCoords6FieldMask;
    static const OSG::BitVector TexCoords7FieldMask;
    static const OSG::BitVector IndicesFieldMask;
    static const OSG::BitVector IndexMappingFieldMask;
    static const OSG::BitVector DlistCacheFieldMask;
    static const OSG::BitVector GLIdFieldMask;
    static const OSG::BitVector IgnoreGLForAspectFieldMask;
    static const OSG::BitVector MinindexFieldMask;
    static const OSG::BitVector MaxindexFieldMask;
    static const OSG::BitVector LowindicesFieldMask;
    static const OSG::BitVector HighindicesFieldMask;
    static const OSG::BitVector VboFieldMask;


    static const OSG::BitVector MTInfluenceMask;

    /*---------------------------------------------------------------------*/
    /*! \name                    Class Get                                 */
    /*! \{                                                                 */

    static        FieldContainerType &getClassType    (void); 
    static        UInt32              getClassTypeId  (void); 

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                FieldContainer Get                            */
    /*! \{                                                                 */

    virtual       FieldContainerType &getType  (void); 
    virtual const FieldContainerType &getType  (void) const; 

    virtual       UInt32              getContainerSize(void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */


           SFGeoPTypesPtr      *editSFTypes          (void);
     const SFGeoPTypesPtr      *getSFTypes          (void) const;
#ifndef OSG_2_PREP
           SFGeoPTypesPtr      *getSFTypes          (void);
#endif

           SFGeoPLengthsPtr    *editSFLengths        (void);
     const SFGeoPLengthsPtr    *getSFLengths        (void) const;
#ifndef OSG_2_PREP
           SFGeoPLengthsPtr    *getSFLengths        (void);
#endif

           SFGeoPositionsPtr   *editSFPositions      (void);
     const SFGeoPositionsPtr   *getSFPositions      (void) const;
#ifndef OSG_2_PREP
           SFGeoPositionsPtr   *getSFPositions      (void);
#endif

           SFGeoNormalsPtr     *editSFNormals        (void);
     const SFGeoNormalsPtr     *getSFNormals        (void) const;
#ifndef OSG_2_PREP
           SFGeoNormalsPtr     *getSFNormals        (void);
#endif

           SFGeoColorsPtr      *editSFColors         (void);
     const SFGeoColorsPtr      *getSFColors         (void) const;
#ifndef OSG_2_PREP
           SFGeoColorsPtr      *getSFColors         (void);
#endif

           SFGeoColorsPtr      *editSFSecondaryColors(void);
     const SFGeoColorsPtr      *getSFSecondaryColors(void) const;
#ifndef OSG_2_PREP
           SFGeoColorsPtr      *getSFSecondaryColors(void);
#endif

           SFGeoTexCoordsPtr   *editSFTexCoords      (void);
     const SFGeoTexCoordsPtr   *getSFTexCoords      (void) const;
#ifndef OSG_2_PREP
           SFGeoTexCoordsPtr   *getSFTexCoords      (void);
#endif

           SFGeoTexCoordsPtr   *editSFTexCoords1     (void);
     const SFGeoTexCoordsPtr   *getSFTexCoords1     (void) const;
#ifndef OSG_2_PREP
           SFGeoTexCoordsPtr   *getSFTexCoords1     (void);
#endif

           SFGeoTexCoordsPtr   *editSFTexCoords2     (void);
     const SFGeoTexCoordsPtr   *getSFTexCoords2     (void) const;
#ifndef OSG_2_PREP
           SFGeoTexCoordsPtr   *getSFTexCoords2     (void);
#endif

           SFGeoTexCoordsPtr   *editSFTexCoords3     (void);
     const SFGeoTexCoordsPtr   *getSFTexCoords3     (void) const;
#ifndef OSG_2_PREP
           SFGeoTexCoordsPtr   *getSFTexCoords3     (void);
#endif

           SFGeoTexCoordsPtr   *editSFTexCoords4     (void);
     const SFGeoTexCoordsPtr   *getSFTexCoords4     (void) const;
#ifndef OSG_2_PREP
           SFGeoTexCoordsPtr   *getSFTexCoords4     (void);
#endif

           SFGeoTexCoordsPtr   *editSFTexCoords5     (void);
     const SFGeoTexCoordsPtr   *getSFTexCoords5     (void) const;
#ifndef OSG_2_PREP
           SFGeoTexCoordsPtr   *getSFTexCoords5     (void);
#endif

           SFGeoTexCoordsPtr   *editSFTexCoords6     (void);
     const SFGeoTexCoordsPtr   *getSFTexCoords6     (void) const;
#ifndef OSG_2_PREP
           SFGeoTexCoordsPtr   *getSFTexCoords6     (void);
#endif

           SFGeoTexCoordsPtr   *editSFTexCoords7     (void);
     const SFGeoTexCoordsPtr   *getSFTexCoords7     (void) const;
#ifndef OSG_2_PREP
           SFGeoTexCoordsPtr   *getSFTexCoords7     (void);
#endif

           SFGeoIndicesPtr     *editSFIndices        (void);
     const SFGeoIndicesPtr     *getSFIndices        (void) const;
#ifndef OSG_2_PREP
           SFGeoIndicesPtr     *getSFIndices        (void);
#endif

           MFUInt16            *editMFIndexMapping   (void);
     const MFUInt16            *getMFIndexMapping   (void) const;
#ifndef OSG_2_PREP
           MFUInt16            *getMFIndexMapping   (void);
#endif

           SFBool              *editSFDlistCache     (void);
     const SFBool              *getSFDlistCache     (void) const;
#ifndef OSG_2_PREP
           SFBool              *getSFDlistCache     (void);
#endif

           SFInt32             *editSFIgnoreGLForAspect(void);
     const SFInt32             *getSFIgnoreGLForAspect(void) const;
#ifndef OSG_2_PREP
           SFInt32             *getSFIgnoreGLForAspect(void);
#endif

           SFUInt32            *editSFMinindex       (void);
     const SFUInt32            *getSFMinindex       (void) const;
#ifndef OSG_2_PREP
           SFUInt32            *getSFMinindex       (void);
#endif

           SFUInt32            *editSFMaxindex       (void);
     const SFUInt32            *getSFMaxindex       (void) const;
#ifndef OSG_2_PREP
           SFUInt32            *getSFMaxindex       (void);
#endif

           MFUInt32            *editMFLowindices     (void);
     const MFUInt32            *getMFLowindices     (void) const;
#ifndef OSG_2_PREP
           MFUInt32            *getMFLowindices     (void);
#endif

           MFUInt32            *editMFHighindices    (void);
     const MFUInt32            *getMFHighindices    (void) const;
#ifndef OSG_2_PREP
           MFUInt32            *getMFHighindices    (void);
#endif

           SFBool              *editSFVbo            (void);
     const SFBool              *getSFVbo            (void) const;
#ifndef OSG_2_PREP
           SFBool              *getSFVbo            (void);
#endif


           GeoPTypesPtr        &editTypes          (void);
     const GeoPTypesPtr        &getTypes          (void) const;
#ifndef OSG_2_PREP
           GeoPTypesPtr        &getTypes          (void);
#endif

           GeoPLengthsPtr      &editLengths        (void);
     const GeoPLengthsPtr      &getLengths        (void) const;
#ifndef OSG_2_PREP
           GeoPLengthsPtr      &getLengths        (void);
#endif

           GeoPositionsPtr     &editPositions      (void);
     const GeoPositionsPtr     &getPositions      (void) const;
#ifndef OSG_2_PREP
           GeoPositionsPtr     &getPositions      (void);
#endif

           GeoNormalsPtr       &editNormals        (void);
     const GeoNormalsPtr       &getNormals        (void) const;
#ifndef OSG_2_PREP
           GeoNormalsPtr       &getNormals        (void);
#endif

           GeoColorsPtr        &editColors         (void);
     const GeoColorsPtr        &getColors         (void) const;
#ifndef OSG_2_PREP
           GeoColorsPtr        &getColors         (void);
#endif

           GeoColorsPtr        &editSecondaryColors(void);
     const GeoColorsPtr        &getSecondaryColors(void) const;
#ifndef OSG_2_PREP
           GeoColorsPtr        &getSecondaryColors(void);
#endif

           GeoTexCoordsPtr     &editTexCoords      (void);
     const GeoTexCoordsPtr     &getTexCoords      (void) const;
#ifndef OSG_2_PREP
           GeoTexCoordsPtr     &getTexCoords      (void);
#endif

           GeoTexCoordsPtr     &editTexCoords1     (void);
     const GeoTexCoordsPtr     &getTexCoords1     (void) const;
#ifndef OSG_2_PREP
           GeoTexCoordsPtr     &getTexCoords1     (void);
#endif

           GeoTexCoordsPtr     &editTexCoords2     (void);
     const GeoTexCoordsPtr     &getTexCoords2     (void) const;
#ifndef OSG_2_PREP
           GeoTexCoordsPtr     &getTexCoords2     (void);
#endif

           GeoTexCoordsPtr     &editTexCoords3     (void);
     const GeoTexCoordsPtr     &getTexCoords3     (void) const;
#ifndef OSG_2_PREP
           GeoTexCoordsPtr     &getTexCoords3     (void);
#endif

           GeoTexCoordsPtr     &editTexCoords4     (void);
     const GeoTexCoordsPtr     &getTexCoords4     (void) const;
#ifndef OSG_2_PREP
           GeoTexCoordsPtr     &getTexCoords4     (void);
#endif

           GeoTexCoordsPtr     &editTexCoords5     (void);
     const GeoTexCoordsPtr     &getTexCoords5     (void) const;
#ifndef OSG_2_PREP
           GeoTexCoordsPtr     &getTexCoords5     (void);
#endif

           GeoTexCoordsPtr     &editTexCoords6     (void);
     const GeoTexCoordsPtr     &getTexCoords6     (void) const;
#ifndef OSG_2_PREP
           GeoTexCoordsPtr     &getTexCoords6     (void);
#endif

           GeoTexCoordsPtr     &editTexCoords7     (void);
     const GeoTexCoordsPtr     &getTexCoords7     (void) const;
#ifndef OSG_2_PREP
           GeoTexCoordsPtr     &getTexCoords7     (void);
#endif

           GeoIndicesPtr       &editIndices        (void);
     const GeoIndicesPtr       &getIndices        (void) const;
#ifndef OSG_2_PREP
           GeoIndicesPtr       &getIndices        (void);
#endif

           bool                &editDlistCache     (void);
     const bool                &getDlistCache     (void) const;
#ifndef OSG_2_PREP
           bool                &getDlistCache     (void);
#endif


           Int32               &editIgnoreGLForAspect(void);
     const Int32               &getIgnoreGLForAspect(void) const;
#ifndef OSG_2_PREP
           Int32               &getIgnoreGLForAspect(void);
#endif

           UInt32              &editMinindex       (void);
     const UInt32              &getMinindex       (void) const;
#ifndef OSG_2_PREP
           UInt32              &getMinindex       (void);
#endif

           UInt32              &editMaxindex       (void);
     const UInt32              &getMaxindex       (void) const;
#ifndef OSG_2_PREP
           UInt32              &getMaxindex       (void);
#endif

           bool                &editVbo            (void);
     const bool                &getVbo            (void) const;
#ifndef OSG_2_PREP
           bool                &getVbo            (void);
#endif

           UInt16              &editIndexMapping   (const UInt32 index);
     const UInt16              &getIndexMapping   (const UInt32 index) const;
#ifndef OSG_2_PREP
           UInt16              &getIndexMapping   (const UInt32 index);
           MFUInt16            &getIndexMapping   (void);
     const MFUInt16            &getIndexMapping   (void) const;
#endif

           UInt32              &editLowindices     (const UInt32 index);
     const UInt32              &getLowindices     (const UInt32 index) const;
#ifndef OSG_2_PREP
           UInt32              &getLowindices     (const UInt32 index);
           MFUInt32            &getLowindices     (void);
     const MFUInt32            &getLowindices     (void) const;
#endif

           UInt32              &editHighindices    (const UInt32 index);
     const UInt32              &getHighindices    (const UInt32 index) const;
#ifndef OSG_2_PREP
           UInt32              &getHighindices    (const UInt32 index);
           MFUInt32            &getHighindices    (void);
     const MFUInt32            &getHighindices    (void) const;
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */

     void setTypes          ( const GeoPTypesPtr &value );
     void setLengths        ( const GeoPLengthsPtr &value );
     void setPositions      ( const GeoPositionsPtr &value );
     void setNormals        ( const GeoNormalsPtr &value );
     void setColors         ( const GeoColorsPtr &value );
     void setSecondaryColors( const GeoColorsPtr &value );
     void setTexCoords      ( const GeoTexCoordsPtr &value );
     void setTexCoords1     ( const GeoTexCoordsPtr &value );
     void setTexCoords2     ( const GeoTexCoordsPtr &value );
     void setTexCoords3     ( const GeoTexCoordsPtr &value );
     void setTexCoords4     ( const GeoTexCoordsPtr &value );
     void setTexCoords5     ( const GeoTexCoordsPtr &value );
     void setTexCoords6     ( const GeoTexCoordsPtr &value );
     void setTexCoords7     ( const GeoTexCoordsPtr &value );
     void setIndices        ( const GeoIndicesPtr &value );
     void setDlistCache     ( const bool &value );
     void setIgnoreGLForAspect( const Int32 &value );
     void setMinindex       ( const UInt32 &value );
     void setMaxindex       ( const UInt32 &value );
     void setVbo            ( const bool &value );

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Binary Access                              */
    /*! \{                                                                 */

    virtual UInt32 getBinSize (const BitVector         &whichField);
    virtual void   copyToBin  (      BinaryDataHandler &pMem,
                               const BitVector         &whichField);
    virtual void   copyFromBin(      BinaryDataHandler &pMem,
                               const BitVector         &whichField);


    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Construction                               */
    /*! \{                                                                 */

    static  GeometryPtr      create          (void); 
    static  GeometryPtr      createEmpty     (void); 

    /*! \}                                                                 */

    /*---------------------------------------------------------------------*/
    /*! \name                       Copy                                   */
    /*! \{                                                                 */

    virtual FieldContainerPtr     shallowCopy     (void) const; 

    /*! \}                                                                 */
    /*=========================  PROTECTED  ===============================*/
  protected:

    /*---------------------------------------------------------------------*/
    /*! \name                      Fields                                  */
    /*! \{                                                                 */

    SFGeoPTypesPtr      _sfTypes;
    SFGeoPLengthsPtr    _sfLengths;
    SFGeoPositionsPtr   _sfPositions;
    SFGeoNormalsPtr     _sfNormals;
    SFGeoColorsPtr      _sfColors;
    SFGeoColorsPtr      _sfSecondaryColors;
    SFGeoTexCoordsPtr   _sfTexCoords;
    SFGeoTexCoordsPtr   _sfTexCoords1;
    SFGeoTexCoordsPtr   _sfTexCoords2;
    SFGeoTexCoordsPtr   _sfTexCoords3;
    SFGeoTexCoordsPtr   _sfTexCoords4;
    SFGeoTexCoordsPtr   _sfTexCoords5;
    SFGeoTexCoordsPtr   _sfTexCoords6;
    SFGeoTexCoordsPtr   _sfTexCoords7;
    SFGeoIndicesPtr     _sfIndices;
    MFUInt16            _mfIndexMapping;
    SFBool              _sfDlistCache;
    SFInt32             _sfGLId;
    SFInt32             _sfIgnoreGLForAspect;
    SFUInt32            _sfMinindex;
    SFUInt32            _sfMaxindex;
    MFUInt32            _mfLowindices;
    MFUInt32            _mfHighindices;
    SFBool              _sfVbo;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Constructors                               */
    /*! \{                                                                 */

    GeometryBase(void);
    GeometryBase(const GeometryBase &source);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Destructors                                */
    /*! \{                                                                 */

    virtual ~GeometryBase(void); 

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */

           SFInt32             *editSFGLId           (void);
     const SFInt32             *getSFGLId           (void) const;
#ifndef OSG_2_PREP
           SFInt32             *getSFGLId           (void);
#endif

           Int32               &editGLId           (void);
     const Int32               &getGLId           (void) const;
#ifndef OSG_2_PREP
           Int32               &getGLId           (void);
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */

     void setGLId           (const Int32 &value);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

#if !defined(OSG_FIXED_MFIELDSYNC)
    void executeSyncImpl(      GeometryBase *pOther,
                         const BitVector         &whichField);

    virtual void   executeSync(      FieldContainer    &other,
                               const BitVector         &whichField);
#else
    void executeSyncImpl(      GeometryBase *pOther,
                         const BitVector         &whichField,
                         const SyncInfo          &sInfo     );

    virtual void   executeSync(      FieldContainer    &other,
                               const BitVector         &whichField,
                               const SyncInfo          &sInfo);

    virtual void execBeginEdit     (const BitVector &whichField,
                                          UInt32     uiAspect,
                                          UInt32     uiContainerSize);

            void execBeginEditImpl (const BitVector &whichField,
                                          UInt32     uiAspect,
                                          UInt32     uiContainerSize);

    virtual void onDestroyAspect(UInt32 uiId, UInt32 uiAspect);
#endif

    /*! \}                                                                 */
    /*==========================  PRIVATE  ================================*/
  private:

    friend class FieldContainer;

    static FieldDescription   *_desc[];
    static FieldContainerType  _type;


    // prohibit default functions (move to 'public' if you need one)
    void operator =(const GeometryBase &source);
};

//---------------------------------------------------------------------------
//   Exported Types
//---------------------------------------------------------------------------


typedef GeometryBase *GeometryBaseP;

typedef osgIF<GeometryBase::isNodeCore,
              CoredNodePtr<Geometry>,
              FieldContainer::attempt_to_create_CoredNodePtr_on_non_NodeCore_FC
              >::_IRet GeometryNodePtr;

typedef RefPtr<GeometryPtr> GeometryRefPtr;

OSG_END_NAMESPACE

#define OSGGEOMETRYBASE_HEADER_CVSID "@(#)$Id: FCBaseTemplate_h.h,v 1.41 2008/06/09 07:30:44 vossg Exp $"

#endif /* _OSGGEOMETRYBASE_H_ */
