/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2002 by the OpenSG Forum                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class PointChunk!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include "OSGConfig.h"

OSG_BEGIN_NAMESPACE


//! access the type of the class
inline
OSG::FieldContainerType &PointChunkBase::getClassType(void)
{
    return _type; 
} 

//! access the numerical type of the class
inline
OSG::UInt32 PointChunkBase::getClassTypeId(void) 
{
    return _type.getId(); 
} 

//! create a new instance of the class
inline
PointChunkPtr PointChunkBase::create(void) 
{
    PointChunkPtr fc; 

    if(getClassType().getPrototype() != OSG::NullFC) 
    {
        fc = PointChunkPtr::dcast(
            getClassType().getPrototype()-> shallowCopy()); 
    }
    
    return fc; 
}

//! create an empty new instance of the class, do not copy the prototype
inline
PointChunkPtr PointChunkBase::createEmpty(void) 
{ 
    PointChunkPtr returnValue; 
    
    newPtr(returnValue); 

    return returnValue; 
}


/*------------------------------ get -----------------------------------*/

//! Get the PointChunk::_sfSize field.
inline
const SFReal32 *PointChunkBase::getSFSize(void) const
{
    return &_sfSize;
}

//! Get the PointChunk::_sfSize field.
inline
SFReal32 *PointChunkBase::editSFSize(void)
{
    return &_sfSize;
}

#ifndef OSG_2_PREP
//! Get the PointChunk::_sfSize field.
inline
SFReal32 *PointChunkBase::getSFSize(void)
{
    return &_sfSize;
}
#endif

//! Get the PointChunk::_sfSmooth field.
inline
const SFBool *PointChunkBase::getSFSmooth(void) const
{
    return &_sfSmooth;
}

//! Get the PointChunk::_sfSmooth field.
inline
SFBool *PointChunkBase::editSFSmooth(void)
{
    return &_sfSmooth;
}

#ifndef OSG_2_PREP
//! Get the PointChunk::_sfSmooth field.
inline
SFBool *PointChunkBase::getSFSmooth(void)
{
    return &_sfSmooth;
}
#endif

//! Get the PointChunk::_sfMinSize field.
inline
const SFReal32 *PointChunkBase::getSFMinSize(void) const
{
    return &_sfMinSize;
}

//! Get the PointChunk::_sfMinSize field.
inline
SFReal32 *PointChunkBase::editSFMinSize(void)
{
    return &_sfMinSize;
}

#ifndef OSG_2_PREP
//! Get the PointChunk::_sfMinSize field.
inline
SFReal32 *PointChunkBase::getSFMinSize(void)
{
    return &_sfMinSize;
}
#endif

//! Get the PointChunk::_sfMaxSize field.
inline
const SFReal32 *PointChunkBase::getSFMaxSize(void) const
{
    return &_sfMaxSize;
}

//! Get the PointChunk::_sfMaxSize field.
inline
SFReal32 *PointChunkBase::editSFMaxSize(void)
{
    return &_sfMaxSize;
}

#ifndef OSG_2_PREP
//! Get the PointChunk::_sfMaxSize field.
inline
SFReal32 *PointChunkBase::getSFMaxSize(void)
{
    return &_sfMaxSize;
}
#endif

//! Get the PointChunk::_sfConstantAttenuation field.
inline
const SFReal32 *PointChunkBase::getSFConstantAttenuation(void) const
{
    return &_sfConstantAttenuation;
}

//! Get the PointChunk::_sfConstantAttenuation field.
inline
SFReal32 *PointChunkBase::editSFConstantAttenuation(void)
{
    return &_sfConstantAttenuation;
}

#ifndef OSG_2_PREP
//! Get the PointChunk::_sfConstantAttenuation field.
inline
SFReal32 *PointChunkBase::getSFConstantAttenuation(void)
{
    return &_sfConstantAttenuation;
}
#endif

//! Get the PointChunk::_sfLinearAttenuation field.
inline
const SFReal32 *PointChunkBase::getSFLinearAttenuation(void) const
{
    return &_sfLinearAttenuation;
}

//! Get the PointChunk::_sfLinearAttenuation field.
inline
SFReal32 *PointChunkBase::editSFLinearAttenuation(void)
{
    return &_sfLinearAttenuation;
}

#ifndef OSG_2_PREP
//! Get the PointChunk::_sfLinearAttenuation field.
inline
SFReal32 *PointChunkBase::getSFLinearAttenuation(void)
{
    return &_sfLinearAttenuation;
}
#endif

//! Get the PointChunk::_sfQuadraticAttenuation field.
inline
const SFReal32 *PointChunkBase::getSFQuadraticAttenuation(void) const
{
    return &_sfQuadraticAttenuation;
}

//! Get the PointChunk::_sfQuadraticAttenuation field.
inline
SFReal32 *PointChunkBase::editSFQuadraticAttenuation(void)
{
    return &_sfQuadraticAttenuation;
}

#ifndef OSG_2_PREP
//! Get the PointChunk::_sfQuadraticAttenuation field.
inline
SFReal32 *PointChunkBase::getSFQuadraticAttenuation(void)
{
    return &_sfQuadraticAttenuation;
}
#endif

//! Get the PointChunk::_sfFadeThreshold field.
inline
const SFReal32 *PointChunkBase::getSFFadeThreshold(void) const
{
    return &_sfFadeThreshold;
}

//! Get the PointChunk::_sfFadeThreshold field.
inline
SFReal32 *PointChunkBase::editSFFadeThreshold(void)
{
    return &_sfFadeThreshold;
}

#ifndef OSG_2_PREP
//! Get the PointChunk::_sfFadeThreshold field.
inline
SFReal32 *PointChunkBase::getSFFadeThreshold(void)
{
    return &_sfFadeThreshold;
}
#endif

//! Get the PointChunk::_sfSprite field.
inline
const SFBool *PointChunkBase::getSFSprite(void) const
{
    return &_sfSprite;
}

//! Get the PointChunk::_sfSprite field.
inline
SFBool *PointChunkBase::editSFSprite(void)
{
    return &_sfSprite;
}

#ifndef OSG_2_PREP
//! Get the PointChunk::_sfSprite field.
inline
SFBool *PointChunkBase::getSFSprite(void)
{
    return &_sfSprite;
}
#endif

//! Get the PointChunk::_sfRMode field.
inline
const SFGLenum *PointChunkBase::getSFRMode(void) const
{
    return &_sfRMode;
}

//! Get the PointChunk::_sfRMode field.
inline
SFGLenum *PointChunkBase::editSFRMode(void)
{
    return &_sfRMode;
}

#ifndef OSG_2_PREP
//! Get the PointChunk::_sfRMode field.
inline
SFGLenum *PointChunkBase::getSFRMode(void)
{
    return &_sfRMode;
}
#endif


//! Get the value of the PointChunk::_sfSize field.
inline
Real32 &PointChunkBase::editSize(void)
{
    return _sfSize.getValue();
}

//! Get the value of the PointChunk::_sfSize field.
inline
const Real32 &PointChunkBase::getSize(void) const
{
    return _sfSize.getValue();
}

#ifndef OSG_2_PREP
//! Get the value of the PointChunk::_sfSize field.
inline
Real32 &PointChunkBase::getSize(void)
{
    return _sfSize.getValue();
}
#endif

//! Set the value of the PointChunk::_sfSize field.
inline
void PointChunkBase::setSize(const Real32 &value)
{
    _sfSize.setValue(value);
}

//! Get the value of the PointChunk::_sfSmooth field.
inline
bool &PointChunkBase::editSmooth(void)
{
    return _sfSmooth.getValue();
}

//! Get the value of the PointChunk::_sfSmooth field.
inline
const bool &PointChunkBase::getSmooth(void) const
{
    return _sfSmooth.getValue();
}

#ifndef OSG_2_PREP
//! Get the value of the PointChunk::_sfSmooth field.
inline
bool &PointChunkBase::getSmooth(void)
{
    return _sfSmooth.getValue();
}
#endif

//! Set the value of the PointChunk::_sfSmooth field.
inline
void PointChunkBase::setSmooth(const bool &value)
{
    _sfSmooth.setValue(value);
}

//! Get the value of the PointChunk::_sfMinSize field.
inline
Real32 &PointChunkBase::editMinSize(void)
{
    return _sfMinSize.getValue();
}

//! Get the value of the PointChunk::_sfMinSize field.
inline
const Real32 &PointChunkBase::getMinSize(void) const
{
    return _sfMinSize.getValue();
}

#ifndef OSG_2_PREP
//! Get the value of the PointChunk::_sfMinSize field.
inline
Real32 &PointChunkBase::getMinSize(void)
{
    return _sfMinSize.getValue();
}
#endif

//! Set the value of the PointChunk::_sfMinSize field.
inline
void PointChunkBase::setMinSize(const Real32 &value)
{
    _sfMinSize.setValue(value);
}

//! Get the value of the PointChunk::_sfMaxSize field.
inline
Real32 &PointChunkBase::editMaxSize(void)
{
    return _sfMaxSize.getValue();
}

//! Get the value of the PointChunk::_sfMaxSize field.
inline
const Real32 &PointChunkBase::getMaxSize(void) const
{
    return _sfMaxSize.getValue();
}

#ifndef OSG_2_PREP
//! Get the value of the PointChunk::_sfMaxSize field.
inline
Real32 &PointChunkBase::getMaxSize(void)
{
    return _sfMaxSize.getValue();
}
#endif

//! Set the value of the PointChunk::_sfMaxSize field.
inline
void PointChunkBase::setMaxSize(const Real32 &value)
{
    _sfMaxSize.setValue(value);
}

//! Get the value of the PointChunk::_sfConstantAttenuation field.
inline
Real32 &PointChunkBase::editConstantAttenuation(void)
{
    return _sfConstantAttenuation.getValue();
}

//! Get the value of the PointChunk::_sfConstantAttenuation field.
inline
const Real32 &PointChunkBase::getConstantAttenuation(void) const
{
    return _sfConstantAttenuation.getValue();
}

#ifndef OSG_2_PREP
//! Get the value of the PointChunk::_sfConstantAttenuation field.
inline
Real32 &PointChunkBase::getConstantAttenuation(void)
{
    return _sfConstantAttenuation.getValue();
}
#endif

//! Set the value of the PointChunk::_sfConstantAttenuation field.
inline
void PointChunkBase::setConstantAttenuation(const Real32 &value)
{
    _sfConstantAttenuation.setValue(value);
}

//! Get the value of the PointChunk::_sfLinearAttenuation field.
inline
Real32 &PointChunkBase::editLinearAttenuation(void)
{
    return _sfLinearAttenuation.getValue();
}

//! Get the value of the PointChunk::_sfLinearAttenuation field.
inline
const Real32 &PointChunkBase::getLinearAttenuation(void) const
{
    return _sfLinearAttenuation.getValue();
}

#ifndef OSG_2_PREP
//! Get the value of the PointChunk::_sfLinearAttenuation field.
inline
Real32 &PointChunkBase::getLinearAttenuation(void)
{
    return _sfLinearAttenuation.getValue();
}
#endif

//! Set the value of the PointChunk::_sfLinearAttenuation field.
inline
void PointChunkBase::setLinearAttenuation(const Real32 &value)
{
    _sfLinearAttenuation.setValue(value);
}

//! Get the value of the PointChunk::_sfQuadraticAttenuation field.
inline
Real32 &PointChunkBase::editQuadraticAttenuation(void)
{
    return _sfQuadraticAttenuation.getValue();
}

//! Get the value of the PointChunk::_sfQuadraticAttenuation field.
inline
const Real32 &PointChunkBase::getQuadraticAttenuation(void) const
{
    return _sfQuadraticAttenuation.getValue();
}

#ifndef OSG_2_PREP
//! Get the value of the PointChunk::_sfQuadraticAttenuation field.
inline
Real32 &PointChunkBase::getQuadraticAttenuation(void)
{
    return _sfQuadraticAttenuation.getValue();
}
#endif

//! Set the value of the PointChunk::_sfQuadraticAttenuation field.
inline
void PointChunkBase::setQuadraticAttenuation(const Real32 &value)
{
    _sfQuadraticAttenuation.setValue(value);
}

//! Get the value of the PointChunk::_sfFadeThreshold field.
inline
Real32 &PointChunkBase::editFadeThreshold(void)
{
    return _sfFadeThreshold.getValue();
}

//! Get the value of the PointChunk::_sfFadeThreshold field.
inline
const Real32 &PointChunkBase::getFadeThreshold(void) const
{
    return _sfFadeThreshold.getValue();
}

#ifndef OSG_2_PREP
//! Get the value of the PointChunk::_sfFadeThreshold field.
inline
Real32 &PointChunkBase::getFadeThreshold(void)
{
    return _sfFadeThreshold.getValue();
}
#endif

//! Set the value of the PointChunk::_sfFadeThreshold field.
inline
void PointChunkBase::setFadeThreshold(const Real32 &value)
{
    _sfFadeThreshold.setValue(value);
}

//! Get the value of the PointChunk::_sfSprite field.
inline
bool &PointChunkBase::editSprite(void)
{
    return _sfSprite.getValue();
}

//! Get the value of the PointChunk::_sfSprite field.
inline
const bool &PointChunkBase::getSprite(void) const
{
    return _sfSprite.getValue();
}

#ifndef OSG_2_PREP
//! Get the value of the PointChunk::_sfSprite field.
inline
bool &PointChunkBase::getSprite(void)
{
    return _sfSprite.getValue();
}
#endif

//! Set the value of the PointChunk::_sfSprite field.
inline
void PointChunkBase::setSprite(const bool &value)
{
    _sfSprite.setValue(value);
}

//! Get the value of the PointChunk::_sfRMode field.
inline
GLenum &PointChunkBase::editRMode(void)
{
    return _sfRMode.getValue();
}

//! Get the value of the PointChunk::_sfRMode field.
inline
const GLenum &PointChunkBase::getRMode(void) const
{
    return _sfRMode.getValue();
}

#ifndef OSG_2_PREP
//! Get the value of the PointChunk::_sfRMode field.
inline
GLenum &PointChunkBase::getRMode(void)
{
    return _sfRMode.getValue();
}
#endif

//! Set the value of the PointChunk::_sfRMode field.
inline
void PointChunkBase::setRMode(const GLenum &value)
{
    _sfRMode.setValue(value);
}


OSG_END_NAMESPACE

#define OSGPOINTCHUNKBASE_INLINE_CVSID "@(#)$Id: FCBaseTemplate_inl.h,v 1.21 2008/06/09 07:30:44 vossg Exp $"

