/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2002 by the OpenSG Forum                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class PolygonChunk!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include "OSGConfig.h"

OSG_BEGIN_NAMESPACE


//! access the type of the class
inline
OSG::FieldContainerType &PolygonChunkBase::getClassType(void)
{
    return _type; 
} 

//! access the numerical type of the class
inline
OSG::UInt32 PolygonChunkBase::getClassTypeId(void) 
{
    return _type.getId(); 
} 

//! create a new instance of the class
inline
PolygonChunkPtr PolygonChunkBase::create(void) 
{
    PolygonChunkPtr fc; 

    if(getClassType().getPrototype() != OSG::NullFC) 
    {
        fc = PolygonChunkPtr::dcast(
            getClassType().getPrototype()-> shallowCopy()); 
    }
    
    return fc; 
}

//! create an empty new instance of the class, do not copy the prototype
inline
PolygonChunkPtr PolygonChunkBase::createEmpty(void) 
{ 
    PolygonChunkPtr returnValue; 
    
    newPtr(returnValue); 

    return returnValue; 
}


/*------------------------------ get -----------------------------------*/

//! Get the PolygonChunk::_sfCullFace field.
inline
const SFGLenum *PolygonChunkBase::getSFCullFace(void) const
{
    return &_sfCullFace;
}

//! Get the PolygonChunk::_sfCullFace field.
inline
SFGLenum *PolygonChunkBase::editSFCullFace(void)
{
    return &_sfCullFace;
}

#ifndef OSG_2_PREP
//! Get the PolygonChunk::_sfCullFace field.
inline
SFGLenum *PolygonChunkBase::getSFCullFace(void)
{
    return &_sfCullFace;
}
#endif

//! Get the PolygonChunk::_sfFrontFace field.
inline
const SFGLenum *PolygonChunkBase::getSFFrontFace(void) const
{
    return &_sfFrontFace;
}

//! Get the PolygonChunk::_sfFrontFace field.
inline
SFGLenum *PolygonChunkBase::editSFFrontFace(void)
{
    return &_sfFrontFace;
}

#ifndef OSG_2_PREP
//! Get the PolygonChunk::_sfFrontFace field.
inline
SFGLenum *PolygonChunkBase::getSFFrontFace(void)
{
    return &_sfFrontFace;
}
#endif

//! Get the PolygonChunk::_sfFrontMode field.
inline
const SFGLenum *PolygonChunkBase::getSFFrontMode(void) const
{
    return &_sfFrontMode;
}

//! Get the PolygonChunk::_sfFrontMode field.
inline
SFGLenum *PolygonChunkBase::editSFFrontMode(void)
{
    return &_sfFrontMode;
}

#ifndef OSG_2_PREP
//! Get the PolygonChunk::_sfFrontMode field.
inline
SFGLenum *PolygonChunkBase::getSFFrontMode(void)
{
    return &_sfFrontMode;
}
#endif

//! Get the PolygonChunk::_sfBackMode field.
inline
const SFGLenum *PolygonChunkBase::getSFBackMode(void) const
{
    return &_sfBackMode;
}

//! Get the PolygonChunk::_sfBackMode field.
inline
SFGLenum *PolygonChunkBase::editSFBackMode(void)
{
    return &_sfBackMode;
}

#ifndef OSG_2_PREP
//! Get the PolygonChunk::_sfBackMode field.
inline
SFGLenum *PolygonChunkBase::getSFBackMode(void)
{
    return &_sfBackMode;
}
#endif

//! Get the PolygonChunk::_sfSmooth field.
inline
const SFBool *PolygonChunkBase::getSFSmooth(void) const
{
    return &_sfSmooth;
}

//! Get the PolygonChunk::_sfSmooth field.
inline
SFBool *PolygonChunkBase::editSFSmooth(void)
{
    return &_sfSmooth;
}

#ifndef OSG_2_PREP
//! Get the PolygonChunk::_sfSmooth field.
inline
SFBool *PolygonChunkBase::getSFSmooth(void)
{
    return &_sfSmooth;
}
#endif

//! Get the PolygonChunk::_sfOffsetFactor field.
inline
const SFReal32 *PolygonChunkBase::getSFOffsetFactor(void) const
{
    return &_sfOffsetFactor;
}

//! Get the PolygonChunk::_sfOffsetFactor field.
inline
SFReal32 *PolygonChunkBase::editSFOffsetFactor(void)
{
    return &_sfOffsetFactor;
}

#ifndef OSG_2_PREP
//! Get the PolygonChunk::_sfOffsetFactor field.
inline
SFReal32 *PolygonChunkBase::getSFOffsetFactor(void)
{
    return &_sfOffsetFactor;
}
#endif

//! Get the PolygonChunk::_sfOffsetBias field.
inline
const SFReal32 *PolygonChunkBase::getSFOffsetBias(void) const
{
    return &_sfOffsetBias;
}

//! Get the PolygonChunk::_sfOffsetBias field.
inline
SFReal32 *PolygonChunkBase::editSFOffsetBias(void)
{
    return &_sfOffsetBias;
}

#ifndef OSG_2_PREP
//! Get the PolygonChunk::_sfOffsetBias field.
inline
SFReal32 *PolygonChunkBase::getSFOffsetBias(void)
{
    return &_sfOffsetBias;
}
#endif

//! Get the PolygonChunk::_sfOffsetPoint field.
inline
const SFBool *PolygonChunkBase::getSFOffsetPoint(void) const
{
    return &_sfOffsetPoint;
}

//! Get the PolygonChunk::_sfOffsetPoint field.
inline
SFBool *PolygonChunkBase::editSFOffsetPoint(void)
{
    return &_sfOffsetPoint;
}

#ifndef OSG_2_PREP
//! Get the PolygonChunk::_sfOffsetPoint field.
inline
SFBool *PolygonChunkBase::getSFOffsetPoint(void)
{
    return &_sfOffsetPoint;
}
#endif

//! Get the PolygonChunk::_sfOffsetLine field.
inline
const SFBool *PolygonChunkBase::getSFOffsetLine(void) const
{
    return &_sfOffsetLine;
}

//! Get the PolygonChunk::_sfOffsetLine field.
inline
SFBool *PolygonChunkBase::editSFOffsetLine(void)
{
    return &_sfOffsetLine;
}

#ifndef OSG_2_PREP
//! Get the PolygonChunk::_sfOffsetLine field.
inline
SFBool *PolygonChunkBase::getSFOffsetLine(void)
{
    return &_sfOffsetLine;
}
#endif

//! Get the PolygonChunk::_sfOffsetFill field.
inline
const SFBool *PolygonChunkBase::getSFOffsetFill(void) const
{
    return &_sfOffsetFill;
}

//! Get the PolygonChunk::_sfOffsetFill field.
inline
SFBool *PolygonChunkBase::editSFOffsetFill(void)
{
    return &_sfOffsetFill;
}

#ifndef OSG_2_PREP
//! Get the PolygonChunk::_sfOffsetFill field.
inline
SFBool *PolygonChunkBase::getSFOffsetFill(void)
{
    return &_sfOffsetFill;
}
#endif

//! Get the PolygonChunk::_mfStipple field.
inline
const MFInt32 *PolygonChunkBase::getMFStipple(void) const
{
    return &_mfStipple;
}

//! Get the PolygonChunk::_mfStipple field.
inline
MFInt32 *PolygonChunkBase::editMFStipple(void)
{
    return &_mfStipple;
}

#ifndef OSG_2_PREP
//! Get the PolygonChunk::_mfStipple field.
inline
MFInt32 *PolygonChunkBase::getMFStipple(void)
{
    return &_mfStipple;
}
#endif


//! Get the value of the PolygonChunk::_sfCullFace field.
inline
GLenum &PolygonChunkBase::editCullFace(void)
{
    return _sfCullFace.getValue();
}

//! Get the value of the PolygonChunk::_sfCullFace field.
inline
const GLenum &PolygonChunkBase::getCullFace(void) const
{
    return _sfCullFace.getValue();
}

#ifndef OSG_2_PREP
//! Get the value of the PolygonChunk::_sfCullFace field.
inline
GLenum &PolygonChunkBase::getCullFace(void)
{
    return _sfCullFace.getValue();
}
#endif

//! Set the value of the PolygonChunk::_sfCullFace field.
inline
void PolygonChunkBase::setCullFace(const GLenum &value)
{
    _sfCullFace.setValue(value);
}

//! Get the value of the PolygonChunk::_sfFrontFace field.
inline
GLenum &PolygonChunkBase::editFrontFace(void)
{
    return _sfFrontFace.getValue();
}

//! Get the value of the PolygonChunk::_sfFrontFace field.
inline
const GLenum &PolygonChunkBase::getFrontFace(void) const
{
    return _sfFrontFace.getValue();
}

#ifndef OSG_2_PREP
//! Get the value of the PolygonChunk::_sfFrontFace field.
inline
GLenum &PolygonChunkBase::getFrontFace(void)
{
    return _sfFrontFace.getValue();
}
#endif

//! Set the value of the PolygonChunk::_sfFrontFace field.
inline
void PolygonChunkBase::setFrontFace(const GLenum &value)
{
    _sfFrontFace.setValue(value);
}

//! Get the value of the PolygonChunk::_sfFrontMode field.
inline
GLenum &PolygonChunkBase::editFrontMode(void)
{
    return _sfFrontMode.getValue();
}

//! Get the value of the PolygonChunk::_sfFrontMode field.
inline
const GLenum &PolygonChunkBase::getFrontMode(void) const
{
    return _sfFrontMode.getValue();
}

#ifndef OSG_2_PREP
//! Get the value of the PolygonChunk::_sfFrontMode field.
inline
GLenum &PolygonChunkBase::getFrontMode(void)
{
    return _sfFrontMode.getValue();
}
#endif

//! Set the value of the PolygonChunk::_sfFrontMode field.
inline
void PolygonChunkBase::setFrontMode(const GLenum &value)
{
    _sfFrontMode.setValue(value);
}

//! Get the value of the PolygonChunk::_sfBackMode field.
inline
GLenum &PolygonChunkBase::editBackMode(void)
{
    return _sfBackMode.getValue();
}

//! Get the value of the PolygonChunk::_sfBackMode field.
inline
const GLenum &PolygonChunkBase::getBackMode(void) const
{
    return _sfBackMode.getValue();
}

#ifndef OSG_2_PREP
//! Get the value of the PolygonChunk::_sfBackMode field.
inline
GLenum &PolygonChunkBase::getBackMode(void)
{
    return _sfBackMode.getValue();
}
#endif

//! Set the value of the PolygonChunk::_sfBackMode field.
inline
void PolygonChunkBase::setBackMode(const GLenum &value)
{
    _sfBackMode.setValue(value);
}

//! Get the value of the PolygonChunk::_sfSmooth field.
inline
bool &PolygonChunkBase::editSmooth(void)
{
    return _sfSmooth.getValue();
}

//! Get the value of the PolygonChunk::_sfSmooth field.
inline
const bool &PolygonChunkBase::getSmooth(void) const
{
    return _sfSmooth.getValue();
}

#ifndef OSG_2_PREP
//! Get the value of the PolygonChunk::_sfSmooth field.
inline
bool &PolygonChunkBase::getSmooth(void)
{
    return _sfSmooth.getValue();
}
#endif

//! Set the value of the PolygonChunk::_sfSmooth field.
inline
void PolygonChunkBase::setSmooth(const bool &value)
{
    _sfSmooth.setValue(value);
}

//! Get the value of the PolygonChunk::_sfOffsetFactor field.
inline
Real32 &PolygonChunkBase::editOffsetFactor(void)
{
    return _sfOffsetFactor.getValue();
}

//! Get the value of the PolygonChunk::_sfOffsetFactor field.
inline
const Real32 &PolygonChunkBase::getOffsetFactor(void) const
{
    return _sfOffsetFactor.getValue();
}

#ifndef OSG_2_PREP
//! Get the value of the PolygonChunk::_sfOffsetFactor field.
inline
Real32 &PolygonChunkBase::getOffsetFactor(void)
{
    return _sfOffsetFactor.getValue();
}
#endif

//! Set the value of the PolygonChunk::_sfOffsetFactor field.
inline
void PolygonChunkBase::setOffsetFactor(const Real32 &value)
{
    _sfOffsetFactor.setValue(value);
}

//! Get the value of the PolygonChunk::_sfOffsetBias field.
inline
Real32 &PolygonChunkBase::editOffsetBias(void)
{
    return _sfOffsetBias.getValue();
}

//! Get the value of the PolygonChunk::_sfOffsetBias field.
inline
const Real32 &PolygonChunkBase::getOffsetBias(void) const
{
    return _sfOffsetBias.getValue();
}

#ifndef OSG_2_PREP
//! Get the value of the PolygonChunk::_sfOffsetBias field.
inline
Real32 &PolygonChunkBase::getOffsetBias(void)
{
    return _sfOffsetBias.getValue();
}
#endif

//! Set the value of the PolygonChunk::_sfOffsetBias field.
inline
void PolygonChunkBase::setOffsetBias(const Real32 &value)
{
    _sfOffsetBias.setValue(value);
}

//! Get the value of the PolygonChunk::_sfOffsetPoint field.
inline
bool &PolygonChunkBase::editOffsetPoint(void)
{
    return _sfOffsetPoint.getValue();
}

//! Get the value of the PolygonChunk::_sfOffsetPoint field.
inline
const bool &PolygonChunkBase::getOffsetPoint(void) const
{
    return _sfOffsetPoint.getValue();
}

#ifndef OSG_2_PREP
//! Get the value of the PolygonChunk::_sfOffsetPoint field.
inline
bool &PolygonChunkBase::getOffsetPoint(void)
{
    return _sfOffsetPoint.getValue();
}
#endif

//! Set the value of the PolygonChunk::_sfOffsetPoint field.
inline
void PolygonChunkBase::setOffsetPoint(const bool &value)
{
    _sfOffsetPoint.setValue(value);
}

//! Get the value of the PolygonChunk::_sfOffsetLine field.
inline
bool &PolygonChunkBase::editOffsetLine(void)
{
    return _sfOffsetLine.getValue();
}

//! Get the value of the PolygonChunk::_sfOffsetLine field.
inline
const bool &PolygonChunkBase::getOffsetLine(void) const
{
    return _sfOffsetLine.getValue();
}

#ifndef OSG_2_PREP
//! Get the value of the PolygonChunk::_sfOffsetLine field.
inline
bool &PolygonChunkBase::getOffsetLine(void)
{
    return _sfOffsetLine.getValue();
}
#endif

//! Set the value of the PolygonChunk::_sfOffsetLine field.
inline
void PolygonChunkBase::setOffsetLine(const bool &value)
{
    _sfOffsetLine.setValue(value);
}

//! Get the value of the PolygonChunk::_sfOffsetFill field.
inline
bool &PolygonChunkBase::editOffsetFill(void)
{
    return _sfOffsetFill.getValue();
}

//! Get the value of the PolygonChunk::_sfOffsetFill field.
inline
const bool &PolygonChunkBase::getOffsetFill(void) const
{
    return _sfOffsetFill.getValue();
}

#ifndef OSG_2_PREP
//! Get the value of the PolygonChunk::_sfOffsetFill field.
inline
bool &PolygonChunkBase::getOffsetFill(void)
{
    return _sfOffsetFill.getValue();
}
#endif

//! Set the value of the PolygonChunk::_sfOffsetFill field.
inline
void PolygonChunkBase::setOffsetFill(const bool &value)
{
    _sfOffsetFill.setValue(value);
}


//! Get the value of the \a index element the PolygonChunk::_mfStipple field.
inline
Int32 &PolygonChunkBase::editStipple(const UInt32 index)
{
    return _mfStipple[index];
}

//! Get the value of the \a index element the PolygonChunk::_mfStipple field.
inline
const Int32 &PolygonChunkBase::getStipple(const UInt32 index) const
{
    return _mfStipple[index];
}

#ifndef OSG_2_PREP
//! Get the value of the \a index element the PolygonChunk::_mfStipple field.
inline
Int32 &PolygonChunkBase::getStipple(const UInt32 index)
{
    return _mfStipple[index];
}

//! Get the PolygonChunk::_mfStipple field.
inline
MFInt32 &PolygonChunkBase::getStipple(void)
{
    return _mfStipple;
}

//! Get the PolygonChunk::_mfStipple field.
inline
const MFInt32 &PolygonChunkBase::getStipple(void) const
{
    return _mfStipple;
}

#endif

OSG_END_NAMESPACE

#define OSGPOLYGONCHUNKBASE_INLINE_CVSID "@(#)$Id: FCBaseTemplate_inl.h,v 1.21 2008/06/09 07:30:44 vossg Exp $"

