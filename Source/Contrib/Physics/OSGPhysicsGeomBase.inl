/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2002 by the OpenSG Forum                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class PhysicsGeom!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include "OSGConfig.h"

OSG_BEGIN_NAMESPACE


//! access the type of the class
inline
OSG::FieldContainerType &PhysicsGeomBase::getClassType(void)
{
    return _type; 
} 

//! access the numerical type of the class
inline
OSG::UInt32 PhysicsGeomBase::getClassTypeId(void) 
{
    return _type.getId(); 
} 

//! create a new instance of the class
inline
PhysicsGeomPtr PhysicsGeomBase::create(void) 
{
    PhysicsGeomPtr fc; 

    if(getClassType().getPrototype() != OSG::NullFC) 
    {
        fc = PhysicsGeomPtr::dcast(
            getClassType().getPrototype()-> shallowCopy()); 
    }
    
    return fc; 
}

//! create an empty new instance of the class, do not copy the prototype
inline
PhysicsGeomPtr PhysicsGeomBase::createEmpty(void) 
{ 
    PhysicsGeomPtr returnValue; 
    
    newPtr(returnValue); 

    return returnValue; 
}


/*------------------------------ get -----------------------------------*/

//! Get the PhysicsGeom::_sfBody field.
inline
const SFPhysicsBodyPtr *PhysicsGeomBase::getSFBody(void) const
{
    return &_sfBody;
}

//! Get the PhysicsGeom::_sfBody field.
inline
SFPhysicsBodyPtr *PhysicsGeomBase::editSFBody(void)
{
    return &_sfBody;
}

#ifndef OSG_2_PREP
//! Get the PhysicsGeom::_sfBody field.
inline
SFPhysicsBodyPtr *PhysicsGeomBase::getSFBody(void)
{
    return &_sfBody;
}
#endif

//! Get the PhysicsGeom::_sfPosition field.
inline
const SFVec3f *PhysicsGeomBase::getSFPosition(void) const
{
    return &_sfPosition;
}

//! Get the PhysicsGeom::_sfPosition field.
inline
SFVec3f *PhysicsGeomBase::editSFPosition(void)
{
    return &_sfPosition;
}

#ifndef OSG_2_PREP
//! Get the PhysicsGeom::_sfPosition field.
inline
SFVec3f *PhysicsGeomBase::getSFPosition(void)
{
    return &_sfPosition;
}
#endif

//! Get the PhysicsGeom::_sfRotation field.
inline
const SFMatrix *PhysicsGeomBase::getSFRotation(void) const
{
    return &_sfRotation;
}

//! Get the PhysicsGeom::_sfRotation field.
inline
SFMatrix *PhysicsGeomBase::editSFRotation(void)
{
    return &_sfRotation;
}

#ifndef OSG_2_PREP
//! Get the PhysicsGeom::_sfRotation field.
inline
SFMatrix *PhysicsGeomBase::getSFRotation(void)
{
    return &_sfRotation;
}
#endif

//! Get the PhysicsGeom::_sfQuaternion field.
inline
const SFQuaternion *PhysicsGeomBase::getSFQuaternion(void) const
{
    return &_sfQuaternion;
}

//! Get the PhysicsGeom::_sfQuaternion field.
inline
SFQuaternion *PhysicsGeomBase::editSFQuaternion(void)
{
    return &_sfQuaternion;
}

#ifndef OSG_2_PREP
//! Get the PhysicsGeom::_sfQuaternion field.
inline
SFQuaternion *PhysicsGeomBase::getSFQuaternion(void)
{
    return &_sfQuaternion;
}
#endif

//! Get the PhysicsGeom::_sfCategoryBits field.
inline
const SFUInt64 *PhysicsGeomBase::getSFCategoryBits(void) const
{
    return &_sfCategoryBits;
}

//! Get the PhysicsGeom::_sfCategoryBits field.
inline
SFUInt64 *PhysicsGeomBase::editSFCategoryBits(void)
{
    return &_sfCategoryBits;
}

#ifndef OSG_2_PREP
//! Get the PhysicsGeom::_sfCategoryBits field.
inline
SFUInt64 *PhysicsGeomBase::getSFCategoryBits(void)
{
    return &_sfCategoryBits;
}
#endif

//! Get the PhysicsGeom::_sfCollideBits field.
inline
const SFUInt64 *PhysicsGeomBase::getSFCollideBits(void) const
{
    return &_sfCollideBits;
}

//! Get the PhysicsGeom::_sfCollideBits field.
inline
SFUInt64 *PhysicsGeomBase::editSFCollideBits(void)
{
    return &_sfCollideBits;
}

#ifndef OSG_2_PREP
//! Get the PhysicsGeom::_sfCollideBits field.
inline
SFUInt64 *PhysicsGeomBase::getSFCollideBits(void)
{
    return &_sfCollideBits;
}
#endif

//! Get the PhysicsGeom::_sfSpace field.
inline
const SFPhysicsSpacePtr *PhysicsGeomBase::getSFSpace(void) const
{
    return &_sfSpace;
}

//! Get the PhysicsGeom::_sfSpace field.
inline
SFPhysicsSpacePtr *PhysicsGeomBase::editSFSpace(void)
{
    return &_sfSpace;
}

#ifndef OSG_2_PREP
//! Get the PhysicsGeom::_sfSpace field.
inline
SFPhysicsSpacePtr *PhysicsGeomBase::getSFSpace(void)
{
    return &_sfSpace;
}
#endif

//! Get the PhysicsGeom::_sfEnable field.
inline
const SFBool *PhysicsGeomBase::getSFEnable(void) const
{
    return &_sfEnable;
}

//! Get the PhysicsGeom::_sfEnable field.
inline
SFBool *PhysicsGeomBase::editSFEnable(void)
{
    return &_sfEnable;
}

#ifndef OSG_2_PREP
//! Get the PhysicsGeom::_sfEnable field.
inline
SFBool *PhysicsGeomBase::getSFEnable(void)
{
    return &_sfEnable;
}
#endif


//! Get the value of the PhysicsGeom::_sfBody field.
inline
PhysicsBodyPtr &PhysicsGeomBase::editBody(void)
{
    return _sfBody.getValue();
}

//! Get the value of the PhysicsGeom::_sfBody field.
inline
const PhysicsBodyPtr &PhysicsGeomBase::getBody(void) const
{
    return _sfBody.getValue();
}

#ifndef OSG_2_PREP
//! Get the value of the PhysicsGeom::_sfBody field.
inline
PhysicsBodyPtr &PhysicsGeomBase::getBody(void)
{
    return _sfBody.getValue();
}
#endif

//! Set the value of the PhysicsGeom::_sfBody field.
inline
void PhysicsGeomBase::setBody(const PhysicsBodyPtr &value)
{
    _sfBody.setValue(value);
}

//! Get the value of the PhysicsGeom::_sfPosition field.
inline
Vec3f &PhysicsGeomBase::editPosition(void)
{
    return _sfPosition.getValue();
}

//! Get the value of the PhysicsGeom::_sfPosition field.
inline
const Vec3f &PhysicsGeomBase::getPosition(void) const
{
    return _sfPosition.getValue();
}

#ifndef OSG_2_PREP
//! Get the value of the PhysicsGeom::_sfPosition field.
inline
Vec3f &PhysicsGeomBase::getPosition(void)
{
    return _sfPosition.getValue();
}
#endif

//! Set the value of the PhysicsGeom::_sfPosition field.
inline
void PhysicsGeomBase::setPosition(const Vec3f &value)
{
    _sfPosition.setValue(value);
}

//! Get the value of the PhysicsGeom::_sfRotation field.
inline
Matrix &PhysicsGeomBase::editRotation(void)
{
    return _sfRotation.getValue();
}

//! Get the value of the PhysicsGeom::_sfRotation field.
inline
const Matrix &PhysicsGeomBase::getRotation(void) const
{
    return _sfRotation.getValue();
}

#ifndef OSG_2_PREP
//! Get the value of the PhysicsGeom::_sfRotation field.
inline
Matrix &PhysicsGeomBase::getRotation(void)
{
    return _sfRotation.getValue();
}
#endif

//! Set the value of the PhysicsGeom::_sfRotation field.
inline
void PhysicsGeomBase::setRotation(const Matrix &value)
{
    _sfRotation.setValue(value);
}

//! Get the value of the PhysicsGeom::_sfQuaternion field.
inline
Quaternion &PhysicsGeomBase::editQuaternion(void)
{
    return _sfQuaternion.getValue();
}

//! Get the value of the PhysicsGeom::_sfQuaternion field.
inline
const Quaternion &PhysicsGeomBase::getQuaternion(void) const
{
    return _sfQuaternion.getValue();
}

#ifndef OSG_2_PREP
//! Get the value of the PhysicsGeom::_sfQuaternion field.
inline
Quaternion &PhysicsGeomBase::getQuaternion(void)
{
    return _sfQuaternion.getValue();
}
#endif

//! Set the value of the PhysicsGeom::_sfQuaternion field.
inline
void PhysicsGeomBase::setQuaternion(const Quaternion &value)
{
    _sfQuaternion.setValue(value);
}

//! Get the value of the PhysicsGeom::_sfCategoryBits field.
inline
UInt64 &PhysicsGeomBase::editCategoryBits(void)
{
    return _sfCategoryBits.getValue();
}

//! Get the value of the PhysicsGeom::_sfCategoryBits field.
inline
const UInt64 &PhysicsGeomBase::getCategoryBits(void) const
{
    return _sfCategoryBits.getValue();
}

#ifndef OSG_2_PREP
//! Get the value of the PhysicsGeom::_sfCategoryBits field.
inline
UInt64 &PhysicsGeomBase::getCategoryBits(void)
{
    return _sfCategoryBits.getValue();
}
#endif

//! Set the value of the PhysicsGeom::_sfCategoryBits field.
inline
void PhysicsGeomBase::setCategoryBits(const UInt64 &value)
{
    _sfCategoryBits.setValue(value);
}

//! Get the value of the PhysicsGeom::_sfCollideBits field.
inline
UInt64 &PhysicsGeomBase::editCollideBits(void)
{
    return _sfCollideBits.getValue();
}

//! Get the value of the PhysicsGeom::_sfCollideBits field.
inline
const UInt64 &PhysicsGeomBase::getCollideBits(void) const
{
    return _sfCollideBits.getValue();
}

#ifndef OSG_2_PREP
//! Get the value of the PhysicsGeom::_sfCollideBits field.
inline
UInt64 &PhysicsGeomBase::getCollideBits(void)
{
    return _sfCollideBits.getValue();
}
#endif

//! Set the value of the PhysicsGeom::_sfCollideBits field.
inline
void PhysicsGeomBase::setCollideBits(const UInt64 &value)
{
    _sfCollideBits.setValue(value);
}

//! Get the value of the PhysicsGeom::_sfSpace field.
inline
PhysicsSpacePtr &PhysicsGeomBase::editSpace(void)
{
    return _sfSpace.getValue();
}

//! Get the value of the PhysicsGeom::_sfSpace field.
inline
const PhysicsSpacePtr &PhysicsGeomBase::getSpace(void) const
{
    return _sfSpace.getValue();
}

#ifndef OSG_2_PREP
//! Get the value of the PhysicsGeom::_sfSpace field.
inline
PhysicsSpacePtr &PhysicsGeomBase::getSpace(void)
{
    return _sfSpace.getValue();
}
#endif

//! Set the value of the PhysicsGeom::_sfSpace field.
inline
void PhysicsGeomBase::setSpace(const PhysicsSpacePtr &value)
{
    _sfSpace.setValue(value);
}

//! Get the value of the PhysicsGeom::_sfEnable field.
inline
bool &PhysicsGeomBase::editEnable(void)
{
    return _sfEnable.getValue();
}

//! Get the value of the PhysicsGeom::_sfEnable field.
inline
const bool &PhysicsGeomBase::getEnable(void) const
{
    return _sfEnable.getValue();
}

#ifndef OSG_2_PREP
//! Get the value of the PhysicsGeom::_sfEnable field.
inline
bool &PhysicsGeomBase::getEnable(void)
{
    return _sfEnable.getValue();
}
#endif

//! Set the value of the PhysicsGeom::_sfEnable field.
inline
void PhysicsGeomBase::setEnable(const bool &value)
{
    _sfEnable.setValue(value);
}


OSG_END_NAMESPACE

#define OSGPHYSICSGEOMBASE_INLINE_CVSID "@(#)$Id: OSGPhysicsGeomBase.inl,v 1.5 2008/06/09 12:28:02 vossg Exp $"

