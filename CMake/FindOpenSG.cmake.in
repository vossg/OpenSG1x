# - Find @CMAKE_PROJECT_NAME@ 2 libraries
# Find the specified @CMAKE_PROJECT_NAME@ 2 libraries and header files.
#
# Since @CMAKE_PROJECT_NAME@ consists of a number of libraries you need to specify which
# of those you want to use. To do so, pass a list of their names after
# the COMPONENTS argument to FIND_PACKAGE. A typical call looks like this:
# FIND_PACKAGE(@CMAKE_PROJECT_NAME@ REQUIRED COMPONENTS OSGBase OSGSystem OSGDrawable)
# OSG_OPTIONAL_COMPONENTS can be used to exclude optional components from
# the computation of @CMAKE_PROJECT_NAME@_FOUND
#
# This module specifies the following variables:
#  @CMAKE_PROJECT_NAME@_INCLUDE_DIRS
#  @CMAKE_PROJECT_NAME@_LIBRARIES
#  @CMAKE_PROJECT_NAME@_LIBRARY_DIRS
#
#  For each component COMP the capitalized name (e.g. OSGBASE, OSGSYSTEM):
#  @CMAKE_PROJECT_NAME@_${COMP}_LIBRARY
#  @CMAKE_PROJECT_NAME@_${COMP}_LIBRARY_RELEASE
#  @CMAKE_PROJECT_NAME@_${COMP}_LIBRARY_DEBUG
#
#  You can control where this module attempts to locate libraries and headers:
#  you can use the following input variables:
#  @CMAKE_PROJECT_NAME_UP@_ROOT          root of an installed @CMAKE_PROJECT_NAME@ with include/OpenSG and lib below it
#  @CMAKE_PROJECT_NAME_UP@_INCLUDE_DIR   header directory
#  @CMAKE_PROJECT_NAME_UP@_LIBRARY_DIR   library directory

# @CMAKE_PROJECT_NAME@_DIR is what is automaticall added by cmake
IF(NOT @CMAKE_PROJECT_NAME_UP@_ROOT AND @CMAKE_PROJECT_NAME@_DIR)
  SET(@CMAKE_PROJECT_NAME_UP@_ROOT ${@CMAKE_PROJECT_NAME@_DIR})
ENDIF(NOT @CMAKE_PROJECT_NAME_UP@_ROOT AND @CMAKE_PROJECT_NAME@_DIR)

IF(NOT OSG_FORCE_CACHE_UPDATE)
  SET(__@CMAKE_PROJECT_NAME@_IN_CACHE TRUE)
  IF(@CMAKE_PROJECT_NAME@_INCLUDE_DIR)
    FOREACH(COMPONENT ${@CMAKE_PROJECT_NAME@_FIND_COMPONENTS})
        STRING(TOUPPER ${COMPONENT} COMPONENT)
        IF(NOT @CMAKE_PROJECT_NAME@_${COMPONENT}_FOUND)
            SET(__@CMAKE_PROJECT_NAME@_IN_CACHE FALSE)
        ENDIF(NOT @CMAKE_PROJECT_NAME@_${COMPONENT}_FOUND)
    ENDFOREACH(COMPONENT)
  ELSE(@CMAKE_PROJECT_NAME@_INCLUDE_DIR)
    SET(__@CMAKE_PROJECT_NAME@_IN_CACHE FALSE)
  ENDIF(@CMAKE_PROJECT_NAME@_INCLUDE_DIR)
ENDIF(NOT OSG_FORCE_CACHE_UPDATE)

# The reason that we failed to find @CMAKE_PROJECT_NAME@. This will be set to a
# user-friendly message when we fail to find some necessary piece of
# @CMAKE_PROJECT_NAME@.
set(@CMAKE_PROJECT_NAME@_ERROR_REASON)

SET(__OSG_LIBDIR_SUFFIX "")

IF(CMAKE_SIZEOF_VOID_P EQUAL 8)
  SET(__OSG_LIBDIR_SUFFIX "64")
ENDIF()

############################################
#
# Check the existence of the libraries.
#
############################################
# This macro is directly taken from FindBoost.cmake that comes with the cmake
# distribution. It is NOT my work, only minor modifications have been made to
# remove references to boost.
#########################################################################

MACRO(__@CMAKE_PROJECT_NAME@_ADJUST_LIB_VARS basename component)
    IF(@CMAKE_PROJECT_NAME@_INCLUDE_DIR)
        IF(NOT WIN32)
          IF(@CMAKE_PROJECT_NAME@_${basename}_LIBRARY_DEBUG AND @CMAKE_PROJECT_NAME@_${basename}_LIBRARY_RELEASE)
          # if the generator supports configuration types then set
          # optimized and debug libraries, or if the CMAKE_BUILD_TYPE has a value
              IF (CMAKE_CONFIGURATION_TYPES OR CMAKE_BUILD_TYPE)
                  SET(@CMAKE_PROJECT_NAME@_${basename}_LIBRARY optimized ${@CMAKE_PROJECT_NAME@_${basename}_LIBRARY_RELEASE} debug ${@CMAKE_PROJECT_NAME@_${basename}_LIBRARY_DEBUG})
              ELSE(CMAKE_CONFIGURATION_TYPES OR CMAKE_BUILD_TYPE)
                  # if there are no configuration types and CMAKE_BUILD_TYPE has no value
                  # then just use the release libraries
                  SET(@CMAKE_PROJECT_NAME@_${basename}_LIBRARY ${@CMAKE_PROJECT_NAME@_${basename}_LIBRARY_RELEASE} )
              ENDIF(CMAKE_CONFIGURATION_TYPES OR CMAKE_BUILD_TYPE)

              SET(@CMAKE_PROJECT_NAME@_${basename}_LIBRARIES optimized ${@CMAKE_PROJECT_NAME@_${basename}_LIBRARY_RELEASE} debug ${@CMAKE_PROJECT_NAME@_${basename}_LIBRARY_DEBUG})
          ENDIF(@CMAKE_PROJECT_NAME@_${basename}_LIBRARY_DEBUG AND @CMAKE_PROJECT_NAME@_${basename}_LIBRARY_RELEASE)
    
          # if only the release version was found, set the debug variable also to the release version
          IF(@CMAKE_PROJECT_NAME@_${basename}_LIBRARY_RELEASE AND NOT @CMAKE_PROJECT_NAME@_${basename}_LIBRARY_DEBUG)
              SET(@CMAKE_PROJECT_NAME@_${basename}_LIBRARY       ${@CMAKE_PROJECT_NAME@_${basename}_LIBRARY_RELEASE})
              SET(@CMAKE_PROJECT_NAME@_${basename}_LIBRARIES     ${@CMAKE_PROJECT_NAME@_${basename}_LIBRARY_RELEASE})
          ENDIF(@CMAKE_PROJECT_NAME@_${basename}_LIBRARY_RELEASE AND NOT @CMAKE_PROJECT_NAME@_${basename}_LIBRARY_DEBUG)
    
          # if only the debug version was found, set the release variable also to the debug version
          IF(@CMAKE_PROJECT_NAME@_${basename}_LIBRARY_DEBUG AND NOT @CMAKE_PROJECT_NAME@_${basename}_LIBRARY_RELEASE)
              SET(@CMAKE_PROJECT_NAME@_${basename}_LIBRARY         ${@CMAKE_PROJECT_NAME@_${basename}_LIBRARY_DEBUG})
              SET(@CMAKE_PROJECT_NAME@_${basename}_LIBRARIES       ${@CMAKE_PROJECT_NAME@_${basename}_LIBRARY_DEBUG})
          ENDIF(@CMAKE_PROJECT_NAME@_${basename}_LIBRARY_DEBUG AND NOT @CMAKE_PROJECT_NAME@_${basename}_LIBRARY_RELEASE)
        
          IF(@CMAKE_PROJECT_NAME@_${basename}_LIBRARY)
              SET(@CMAKE_PROJECT_NAME@_${basename}_LIBRARY ${@CMAKE_PROJECT_NAME@_${basename}_LIBRARY} CACHE FILEPATH "The @CMAKE_PROJECT_NAME@ ${basename} library")
              GET_FILENAME_COMPONENT(@CMAKE_PROJECT_NAME@_LIBRARY_DIRS "${@CMAKE_PROJECT_NAME@_${basename}_LIBRARY}" PATH)
              SET(@CMAKE_PROJECT_NAME@_LIBRARY_DIRS ${@CMAKE_PROJECT_NAME@_LIBRARY_DIRS} CACHE FILEPATH "@CMAKE_PROJECT_NAME@ library directory")
              SET(@CMAKE_PROJECT_NAME@_${basename}_FOUND ON CACHE INTERNAL "Whether the @CMAKE_PROJECT_NAME@ ${basename} library found")
          ENDIF(@CMAKE_PROJECT_NAME@_${basename}_LIBRARY)
        ELSE(NOT WIN32)
          IF(@CMAKE_PROJECT_NAME@_${basename}_LIBRARY_DEBUG OR @CMAKE_PROJECT_NAME@_${basename}_LIBRARY_DEBUGOPT OR 
             @CMAKE_PROJECT_NAME@_${basename}_LIBRARY_RELEASE OR @CMAKE_PROJECT_NAME@_${basename}_LIBRARY_RELEASENOOPT)

              SET(@CMAKE_PROJECT_NAME@_${basename}_FOUND ON CACHE INTERNAL "Whether the @CMAKE_PROJECT_NAME@ ${basename} library found")

              SET(@CMAKE_PROJECT_NAME@_${basename}_LIBRARY ${component})
          ENDIF()
        ENDIF(NOT WIN32)
    ENDIF(@CMAKE_PROJECT_NAME@_INCLUDE_DIR)

    # Make variables changeble to the advanced user
    MARK_AS_ADVANCED(
        @CMAKE_PROJECT_NAME@_${basename}_LIBRARY
        @CMAKE_PROJECT_NAME@_${basename}_LIBRARY_RELEASE
        @CMAKE_PROJECT_NAME@_${basename}_LIBRARY_DEBUG
    )
ENDMACRO(__@CMAKE_PROJECT_NAME@_ADJUST_LIB_VARS)


FUNCTION(SETUP_OSG_LIB_TARGETS COMPONENT UPPERCOMPONENT)

  ADD_LIBRARY(${COMPONENT} SHARED IMPORTED)

  IF(@CMAKE_PROJECT_NAME@_${UPPERCOMPONENT}_LIBRARY_RELEASE)

    GET_FILENAME_COMPONENT(OSG_TMP_LIB_DIR_OPT ${@CMAKE_PROJECT_NAME@_${UPPERCOMPONENT}_LIBRARY_RELEASE}
                           PATH)
      
    IF(UNIX)
      SET(OSG_IMP_RELEASE IMPORTED_LOCATION_RELEASE ${@CMAKE_PROJECT_NAME@_${UPPERCOMPONENT}_LIBRARY_RELEASE})
    ELSE(UNIX)
      SET(OSG_IMP_RELEASE IMPORTED_IMPLIB_RELEASE ${@CMAKE_PROJECT_NAME@_${UPPERCOMPONENT}_LIBRARY_RELEASE}
                          IMPORTED_LOCATION_RELEASE ${OSG_TMP_LIB_DIR_OPT})
    ENDIF(UNIX)

  ENDIF(@CMAKE_PROJECT_NAME@_${UPPERCOMPONENT}_LIBRARY_RELEASE)


  IF(@CMAKE_PROJECT_NAME@_${UPPERCOMPONENT}_LIBRARY_RELEASENOOPT)

    GET_FILENAME_COMPONENT(OSG_TMP_LIB_DIR_OPT ${@CMAKE_PROJECT_NAME@_${UPPERCOMPONENT}_LIBRARY_RELEASENOOPT}
                           PATH)
      
    IF(UNIX)
      SET(OSG_IMP_RELEASENOOPT IMPORTED_LOCATION_RELEASENOOPT ${@CMAKE_PROJECT_NAME@_${UPPERCOMPONENT}_LIBRARY_RELEASENOOPT})
    ELSE(UNIX)
      SET(OSG_IMP_RELEASENOOPT IMPORTED_IMPLIB_RELEASENOOPT ${@CMAKE_PROJECT_NAME@_${UPPERCOMPONENT}_LIBRARY_RELEASENOOPT} 
                               IMPORTED_LOCATION_RELEASENOOPT ${OSG_TMP_LIB_DIR_OPT})
    ENDIF(UNIX)

  ENDIF(@CMAKE_PROJECT_NAME@_${UPPERCOMPONENT}_LIBRARY_RELEASENOOPT)


  IF(@CMAKE_PROJECT_NAME@_${UPPERCOMPONENT}_LIBRARY_DEBUG)

    GET_FILENAME_COMPONENT(OSG_TMP_LIB_DIR_DBG ${@CMAKE_PROJECT_NAME@_${UPPERCOMPONENT}_LIBRARY_DEBUG}
                           PATH)

    IF(UNIX)
      SET(OSG_IMP_DEBUG IMPORTED_LOCATION_DEBUG ${@CMAKE_PROJECT_NAME@_${UPPERCOMPONENT}_LIBRARY_DEBUG})
      SET(OSG_IMP_DEBUG ${OSG_IMP_DEBUG} IMPORTED_LOCATION_DEBUGGV ${@CMAKE_PROJECT_NAME@_${UPPERCOMPONENT}_LIBRARY_DEBUG})
    ELSE(UNIX)
      SET(OSG_IMP_DEBUG IMPORTED_IMPLIB_DEBUG ${@CMAKE_PROJECT_NAME@_${UPPERCOMPONENT}_LIBRARY_DEBUG}
                        IMPORTED_LOCATION_DEBUG ${OSG_TMP_LIB_DIR_DBG})
    ENDIF(UNIX)

  ENDIF(@CMAKE_PROJECT_NAME@_${UPPERCOMPONENT}_LIBRARY_DEBUG)


  IF(@CMAKE_PROJECT_NAME@_${UPPERCOMPONENT}_LIBRARY_DEBUGOPT)

    GET_FILENAME_COMPONENT(OSG_TMP_LIB_DIR_DBG ${@CMAKE_PROJECT_NAME@_${UPPERCOMPONENT}_LIBRARY_DEBUGOPT}
                           PATH)

    IF(UNIX)
      SET(OSG_IMP_DEBUGOPT IMPORTED_LOCATION_DEBUGOPT ${@CMAKE_PROJECT_NAME@_${UPPERCOMPONENT}_LIBRARY_DEBUGOPT})
      SET(OSG_IMP_DEBUGOPT ${OSG_IMP_DEBUGOPT} IMPORTED_LOCATION_DEBUGOPTGV ${@CMAKE_PROJECT_NAME@_${UPPERCOMPONENT}_LIBRARY_DEBUGOPT})
    ELSE(UNIX)
      SET(OSG_IMP_DEBUGOPT IMPORTED_IMPLIB_DEBUGOPT ${@CMAKE_PROJECT_NAME@_${UPPERCOMPONENT}_LIBRARY_DEBUGOPT}
                           IMPORTED_LOCATION_DEBUGOPT ${OSG_TMP_LIB_DIR_DBG})
    ENDIF(UNIX)

  ENDIF(@CMAKE_PROJECT_NAME@_${UPPERCOMPONENT}_LIBRARY_DEBUGOPT)

  IF(OSG_IMP_RELEASE OR OSG_IMP_RELEASENOOPT OR OSG_IMP_DEBUG OR OSG_IMP_DEBUGOPT)
    SET_TARGET_PROPERTIES(${COMPONENT} PROPERTIES
                          ${OSG_IMP_RELEASE}
                          ${OSG_IMP_RELEASENOOPT}
                          ${OSG_IMP_DEBUG}
                          ${OSG_IMP_DEBUGOPT}       )
  ENDIF(OSG_IMP_RELEASE OR OSG_IMP_RELEASENOOPT OR OSG_IMP_DEBUG OR OSG_IMP_DEBUGOPT)  

ENDFUNCTION(SETUP_OSG_LIB_TARGETS)

#-------------------------------------------------------------------------------


IF(__@CMAKE_PROJECT_NAME@_IN_CACHE)
    # values are already in the cache

    SET(@CMAKE_PROJECT_NAME@_FOUND TRUE)
    FOREACH(COMPONENT ${@CMAKE_PROJECT_NAME@_FIND_COMPONENTS})
        STRING(TOUPPER ${COMPONENT} UPPERCOMPONENT)

        # avoid setting up componentes more than once - which is not
        # allowed for import libraries
        IF(NOT TARGET ${COMPONENT})
            __@CMAKE_PROJECT_NAME@_ADJUST_LIB_VARS(${UPPERCOMPONENT} ${COMPONENT})

            SET(@CMAKE_PROJECT_NAME@_LIBRARIES ${@CMAKE_PROJECT_NAME@_LIBRARIES} ${@CMAKE_PROJECT_NAME@_${UPPERCOMPONENT}_LIBRARY})
            SETUP_OSG_LIB_TARGETS(${COMPONENT} ${UPPERCOMPONENT})
        ENDIF(NOT TARGET ${COMPONENT})
    ENDFOREACH(COMPONENT)

    SET(@CMAKE_PROJECT_NAME@_INCLUDE_DIRS "${@CMAKE_PROJECT_NAME@_INCLUDE_DIR}" "${@CMAKE_PROJECT_NAME@_INCLUDE_DIR}/OpenSG")

ELSE(__@CMAKE_PROJECT_NAME@_IN_CACHE)
    # need to search for libs

    SET(__@CMAKE_PROJECT_NAME@_INCLUDE_SEARCH_DIRS
        C:/OpenSG/include
        "C:/OpenSG"
        "$ENV{ProgramFiles}/OpenSG"
        /sw/local/include
    )

    SET(__@CMAKE_PROJECT_NAME@_LIBRARIES_SEARCH_DIRS
        C:/OpenSG/lib
        "C:/OpenSG"
        "$ENV{ProgramFiles}/OpenSG"
        /sw/local/lib
    )

    # handle input variable @CMAKE_PROJECT_NAME_UP@_ROOT
    IF(@CMAKE_PROJECT_NAME_UP@_ROOT)
        FILE(TO_CMAKE_PATH ${@CMAKE_PROJECT_NAME_UP@_ROOT} @CMAKE_PROJECT_NAME_UP@_ROOT)
        SET(__@CMAKE_PROJECT_NAME@_INCLUDE_SEARCH_DIRS
            ${@CMAKE_PROJECT_NAME_UP@_ROOT}/include
            ${@CMAKE_PROJECT_NAME_UP@_ROOT}
            ${__@CMAKE_PROJECT_NAME@_INCLUDE_SEARCH_DIRS})

        SET(__@CMAKE_PROJECT_NAME@_LIBRARIES_SEARCH_DIRS
            ${@CMAKE_PROJECT_NAME_UP@_ROOT}/lib
            ${@CMAKE_PROJECT_NAME_UP@_ROOT}/stage/lib
            ${__@CMAKE_PROJECT_NAME@_LIBRARIES_SEARCH_DIRS})

        IF(__OSG_LIBDIR_SUFFIX)
          SET(__@CMAKE_PROJECT_NAME@_LIBRARIES_SEARCH_DIRS
              ${@CMAKE_PROJECT_NAME_UP@_ROOT}/lib${__OSG_LIBDIR_SUFFIX}
              ${@CMAKE_PROJECT_NAME_UP@_ROOT}/stage/lib${__OSG_LIBDIR_SUFFIX}
              ${__@CMAKE_PROJECT_NAME@_LIBRARIES_SEARCH_DIRS})
        ENDIF()
    ENDIF(@CMAKE_PROJECT_NAME_UP@_ROOT)

    # handle input variable @CMAKE_PROJECT_NAME_UP@_INCLUDE_DIR
    IF(@CMAKE_PROJECT_NAME_UP@_INCLUDE_DIR)
        FILE(TO_CMAKE_PATH ${@CMAKE_PROJECT_NAME_UP@_INCLUDE_DIR} @CMAKE_PROJECT_NAME_UP@_INCLUDE_DIR)
        SET(__@CMAKE_PROJECT_NAME@_INCLUDE_SEARCH_DIRS
            ${@CMAKE_PROJECT_NAME_UP@_INCLUDE_DIR} ${__@CMAKE_PROJECT_NAME@_INCLUDE_SEARCH_DIRS})
    ENDIF(@CMAKE_PROJECT_NAME_UP@_INCLUDE_DIR)

    # handle input variable @CMAKE_PROJECT_NAME_UP@_LIBRARY_DIR
    IF(@CMAKE_PROJECT_NAME_UP@_LIBRARY_DIR)
        FILE(TO_CMAKE_PATH ${@CMAKE_PROJECT_NAME_UP@_LIBRARY_DIR} @CMAKE_PROJECT_NAME_UP@_LIBRARY_DIR)
        SET(__@CMAKE_PROJECT_NAME@_LIBRARIES_SEARCH_DIRS
            ${@CMAKE_PROJECT_NAME_UP@_LIBRARY_DIR} ${__@CMAKE_PROJECT_NAME@_LIBRARIES_SEARCH_DIRS})
    ENDIF(@CMAKE_PROJECT_NAME_UP@_LIBRARY_DIR)


    IF(NOT @CMAKE_PROJECT_NAME@_INCLUDE_DIR)
        # try to find include dirrectory by searching for @CMAKE_PROJECT_NAME_SHORT@Configured.h

        FIND_PATH(@CMAKE_PROJECT_NAME@_INCLUDE_DIR
            NAMES         OpenSG/@CMAKE_PROJECT_NAME_SHORT@Configured.h
            HINTS         ${__@CMAKE_PROJECT_NAME@_INCLUDE_SEARCH_DIRS})
    ENDIF(NOT @CMAKE_PROJECT_NAME@_INCLUDE_DIR)

    # ------------------------------------------------------------------------
    #  Begin finding OpenSG libraries
    # ------------------------------------------------------------------------
    FOREACH(COMPONENT ${@CMAKE_PROJECT_NAME@_FIND_COMPONENTS})
        STRING(TOUPPER ${COMPONENT} UPPERCOMPONENT)
        SET(@CMAKE_PROJECT_NAME@_${UPPERCOMPONENT}_LIBRARY "@CMAKE_PROJECT_NAME@_${UPPERCOMPONENT}_LIBRARY-NOTFOUND" )
        SET(@CMAKE_PROJECT_NAME@_${UPPERCOMPONENT}_LIBRARY_RELEASE "@CMAKE_PROJECT_NAME@_${UPPERCOMPONENT}_LIBRARY_RELEASE-NOTFOUND" )
        SET(@CMAKE_PROJECT_NAME@_${UPPERCOMPONENT}_LIBRARY_DEBUG "@CMAKE_PROJECT_NAME@_${UPPERCOMPONENT}_LIBRARY_DEBUG-NOTFOUND")

        IF(WIN32)
          SET(@CMAKE_PROJECT_NAME@_${UPPERCOMPONENT}_LIBRARY_RELEASENOOPT "@CMAKE_PROJECT_NAME@_${UPPERCOMPONENT}_LIBRARY_RELEASENOOPT-NOTFOUND" )
          SET(@CMAKE_PROJECT_NAME@_${UPPERCOMPONENT}_LIBRARY_DEBUGOPT "@CMAKE_PROJECT_NAME@_${UPPERCOMPONENT}_LIBRARY_DEBUGOPT-NOTFOUND")
        ENDIF(WIN32)

        FIND_LIBRARY(@CMAKE_PROJECT_NAME@_${UPPERCOMPONENT}_LIBRARY_RELEASE
            NAMES  ${COMPONENT}
            HINTS  ${__@CMAKE_PROJECT_NAME@_LIBRARIES_SEARCH_DIRS}
            PATH_SUFFIXES "release" "rel" "opt" "relwithdbg"
        )
   
        IF(WIN32)
          FIND_LIBRARY(@CMAKE_PROJECT_NAME@_${UPPERCOMPONENT}_LIBRARY_DEBUG
              NAMES  "${COMPONENT}D"
              HINTS  ${__@CMAKE_PROJECT_NAME@_LIBRARIES_SEARCH_DIRS}
              PATH_SUFFIXES "debug" "dbg" "debugopt"
          )

          FIND_LIBRARY(@CMAKE_PROJECT_NAME@_${UPPERCOMPONENT}_LIBRARY_RELEASENOOPT
              NAMES  "${COMPONENT}RN"
              HINTS  ${__@CMAKE_PROJECT_NAME@_LIBRARIES_SEARCH_DIRS}
              PATH_SUFFIXES "relnoopt"
          )

          FIND_LIBRARY(@CMAKE_PROJECT_NAME@_${UPPERCOMPONENT}_LIBRARY_DEBUGOPT
              NAMES  "${COMPONENT}DO"
              HINTS  ${__@CMAKE_PROJECT_NAME@_LIBRARIES_SEARCH_DIRS}
              PATH_SUFFIXES "debugopt"
          )
        ELSE(WIN32)
          FIND_LIBRARY(@CMAKE_PROJECT_NAME@_${UPPERCOMPONENT}_LIBRARY_DEBUG
              NAMES  ${COMPONENT}
              HINTS  ${__@CMAKE_PROJECT_NAME@_LIBRARIES_SEARCH_DIRS}
              PATH_SUFFIXES "debug" "dbg"
          )
        ENDIF(WIN32)
    
        __@CMAKE_PROJECT_NAME@_ADJUST_LIB_VARS(${UPPERCOMPONENT} ${COMPONENT})

    ENDFOREACH(COMPONENT)
    # ------------------------------------------------------------------------
    #  End finding @CMAKE_PROJECT_NAME@ libraries
    # ------------------------------------------------------------------------

    SET(@CMAKE_PROJECT_NAME@_INCLUDE_DIRS "${@CMAKE_PROJECT_NAME@_INCLUDE_DIR}" "${@CMAKE_PROJECT_NAME@_INCLUDE_DIR}/OpenSG")

    SET(@CMAKE_PROJECT_NAME@_FOUND FALSE)

    IF(@CMAKE_PROJECT_NAME@_INCLUDE_DIR)
        SET(@CMAKE_PROJECT_NAME@_FOUND TRUE)

        # check if all requested components were found
        SET(__@CMAKE_PROJECT_NAME@_CHECKED_COMPONENT FALSE)
        SET(__@CMAKE_PROJECT_NAME@_MISSING_COMPONENTS)

        FOREACH(_COMPONENT ${@CMAKE_PROJECT_NAME@_FIND_COMPONENTS})
            STRING(TOUPPER ${_COMPONENT} COMPONENT)
            SET(__@CMAKE_PROJECT_NAME@_CHECKED_COMPONENT TRUE)

            IF(NOT @CMAKE_PROJECT_NAME@_${COMPONENT}_FOUND)
                STRING(TOLOWER ${COMPONENT} COMPONENT)
                LIST(APPEND __@CMAKE_PROJECT_NAME@_MISSING_COMPONENTS ${COMPONENT})

                LIST(FIND OSG_OPTIONAL_COMPONENTS ${_COMPONENT} _CMP_OPTIONAL)

                IF(_CMP_OPTIONAL EQUAL -1)
                  SET(@CMAKE_PROJECT_NAME@_FOUND FALSE)
                ENDIF()
            ENDIF(NOT @CMAKE_PROJECT_NAME@_${COMPONENT}_FOUND)
        ENDFOREACH(_COMPONENT)

        IF(__@CMAKE_PROJECT_NAME@_MISSING_COMPONENTS)
            # We were unable to find some libraries, so generate a sensible
            # error message that lists the libraries we were unable to find.
            SET(@CMAKE_PROJECT_NAME@_ERROR_REASON
                "${@CMAKE_PROJECT_NAME@_ERROR_REASON}\nThe following @CMAKE_PROJECT_NAME@ libraries could not be found:\n")
            FOREACH(COMPONENT ${__@CMAKE_PROJECT_NAME@_MISSING_COMPONENTS})
                SET(@CMAKE_PROJECT_NAME@_ERROR_REASON
                    "${@CMAKE_PROJECT_NAME@_ERROR_REASON}        ${COMPONENT}\n")
            ENDFOREACH(COMPONENT)
        
            LIST(LENGTH @CMAKE_PROJECT_NAME@_FIND_COMPONENTS __@CMAKE_PROJECT_NAME@_NUM_COMPONENTS_WANTED)
            LIST(LENGTH __@CMAKE_PROJECT_NAME@_MISSING_COMPONENTS __@CMAKE_PROJECT_NAME@_NUM_MISSING_COMPONENTS)
            IF(${__@CMAKE_PROJECT_NAME@_NUM_COMPONENTS_WANTED} EQUAL ${__@CMAKE_PROJECT_NAME@_NUM_MISSING_COMPONENTS})
                SET(@CMAKE_PROJECT_NAME@_ERROR_REASON
                "${@CMAKE_PROJECT_NAME@_ERROR_REASON}No @CMAKE_PROJECT_NAME@ libraries were found. You may need to set @CMAKE_PROJECT_NAME_UP@_LIBRARY_DIR to the directory containing @CMAKE_PROJECT_NAME@ libraries or @CMAKE_PROJECT_NAME_UP@_ROOT to the location of @CMAKE_PROJECT_NAME@.")
            ELSE(${__@CMAKE_PROJECT_NAME@_NUM_COMPONENTS_WANTED} EQUAL ${__@CMAKE_PROJECT_NAME@_NUM_MISSING_COMPONENTS})
                SET(@CMAKE_PROJECT_NAME@_ERROR_REASON
                "${@CMAKE_PROJECT_NAME@_ERROR_REASON}Some (but not all) of the required @CMAKE_PROJECT_NAME@ libraries were found. You may need to install these additional @CMAKE_PROJECT_NAME@ libraries. Alternatively, set @CMAKE_PROJECT_NAME_UP@_LIBRARY_DIR to the directory containing @CMAKE_PROJECT_NAME@ libraries or @CMAKE_PROJECT_NAME_UP@_ROOT to the location of @CMAKE_PROJECT_NAME@.")
            ENDIF(${__@CMAKE_PROJECT_NAME@_NUM_COMPONENTS_WANTED} EQUAL ${__@CMAKE_PROJECT_NAME@_NUM_MISSING_COMPONENTS})
        ENDIF(__@CMAKE_PROJECT_NAME@_MISSING_COMPONENTS)

    ENDIF(@CMAKE_PROJECT_NAME@_INCLUDE_DIR)

    IF(@CMAKE_PROJECT_NAME@_FOUND)
        IF(NOT @CMAKE_PROJECT_NAME@_FIND_QUIETLY)
            MESSAGE(STATUS "@CMAKE_PROJECT_NAME@ found.")
        ENDIF(NOT @CMAKE_PROJECT_NAME@_FIND_QUIETLY)

        IF (NOT @CMAKE_PROJECT_NAME@_FIND_QUIETLY)
            MESSAGE(STATUS "Found the following @CMAKE_PROJECT_NAME@ libraries:")
        ENDIF(NOT @CMAKE_PROJECT_NAME@_FIND_QUIETLY)

        FOREACH(COMPONENT  ${@CMAKE_PROJECT_NAME@_FIND_COMPONENTS})
            STRING(TOUPPER ${COMPONENT} UPPERCOMPONENT)
            IF(@CMAKE_PROJECT_NAME@_${UPPERCOMPONENT}_FOUND)
                IF(NOT @CMAKE_PROJECT_NAME@_FIND_QUIETLY)
                    MESSAGE(STATUS "  ${COMPONENT}")
                ENDIF(NOT @CMAKE_PROJECT_NAME@_FIND_QUIETLY)

                SETUP_OSG_LIB_TARGETS(${COMPONENT} ${UPPERCOMPONENT})

                SET(@CMAKE_PROJECT_NAME@_LIBRARIES ${@CMAKE_PROJECT_NAME@_LIBRARIES} ${@CMAKE_PROJECT_NAME@_${UPPERCOMPONENT}_LIBRARY})
            ENDIF(@CMAKE_PROJECT_NAME@_${UPPERCOMPONENT}_FOUND)
        ENDFOREACH(COMPONENT)

    ELSE(@CMAKE_PROJECT_NAME@_FOUND)
        IF(@CMAKE_PROJECT_NAME@_FIND_REQUIRED)
            MESSAGE(SEND_ERROR "Unable to find the requested @CMAKE_PROJECT_NAME@ libraries.\n${@CMAKE_PROJECT_NAME@_ERROR_REASON}")
        ENDIF(@CMAKE_PROJECT_NAME@_FIND_REQUIRED)
    ENDIF(@CMAKE_PROJECT_NAME@_FOUND)

ENDIF(__@CMAKE_PROJECT_NAME@_IN_CACHE)
