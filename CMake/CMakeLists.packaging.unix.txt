
CMAKE_MINIMUM_REQUIRED(VERSION 2.8)

PROJECT(OpenSGPack)

IF("${${PROJECT_NAME}_SOURCE_DIR}"  STREQUAL "${${PROJECT_NAME}_BINARY_DIR}")
  MESSAGE(FATAL_ERROR "OpenSG requires an out of source Build. \n"
                      "Please create a separate binary directory and run "
                      "CMake there.")
ENDIF("${${PROJECT_NAME}_SOURCE_DIR}"  STREQUAL "${${PROJECT_NAME}_BINARY_DIR}")

IF(CMAKE_INSTALL_PREFIX STREQUAL /usr/local)
  SET(CMAKE_INSTALL_PREFIX ${CMAKE_CURRENT_BINARY_DIR}/Pack.install 
                           CACHE PATH "" FORCE)
ENDIF()

################
# Ref Dir
################

STRING(REGEX REPLACE /[^/]*/[^/]*/[^/]*$ "" _BASE_INSTALL_DIR ${CMAKE_CURRENT_SOURCE_DIR})

#MESSAGE("BASE DIR : ${_BASE_INSTALL_DIR}")

################
# includes 
################

FILE(GLOB_RECURSE _${PROJECT_NAME}_INCLUDES 
                  RELATIVE ${_BASE_INSTALL_DIR}
                  ${_BASE_INSTALL_DIR}/include/*)

#MESSAGE("INC : ${_${PROJECT_NAME}_INCLUDES}")

FOREACH(_INCLUDE_ELEM ${_${PROJECT_NAME}_INCLUDES})

  STRING(REGEX REPLACE /[^/]*$ "" _INST_PATH ${_INCLUDE_ELEM})

  INSTALL(FILES ${_BASE_INSTALL_DIR}/${_INCLUDE_ELEM}
                DESTINATION ${_INST_PATH}
                PERMISSIONS OWNER_WRITE OWNER_READ
                            GROUP_READ
                            WORLD_READ
                COMPONENT headers)

ENDFOREACH()

################
# libs 
################

FILE(GLOB_RECURSE _${PROJECT_NAME}_LIBS
                  RELATIVE ${_BASE_INSTALL_DIR}
                  ${_BASE_INSTALL_DIR}/lib@OSG_LIBDIR_BASE_SUFFIX@/*)


FOREACH(_LIB_ELEM ${_${PROJECT_NAME}_LIBS})

  STRING(REGEX REPLACE /[^/]*$ "" _INST_PATH ${_LIB_ELEM})

  SET(_ELEM_COMPONENT libraries)

  IF(${_INST_PATH} MATCHES /python[1-9]\\.[0-9]/)
    IF(${_INST_PATH} MATCHES /debug/)
      SET(_ELEM_COMPONENT python_debug)
    ELSE()
      SET(_ELEM_COMPONENT python)
    ENDIF()
  ELSEIF(${_INST_PATH} MATCHES /debug$)
    SET(_ELEM_COMPONENT libraries_debug)
  ENDIF()

#  MESSAGE("LIB : ${_LIB_ELEM} ${_ELEM_COMPONENT} ${_INST_PATH}")

  INSTALL(FILES ${_BASE_INSTALL_DIR}/${_LIB_ELEM}
                DESTINATION ${_INST_PATH}
                PERMISSIONS OWNER_WRITE OWNER_READ
                            GROUP_READ
                            WORLD_READ
                COMPONENT ${_ELEM_COMPONENT})

ENDFOREACH()


################
# bin
################

FILE(GLOB_RECURSE _${PROJECT_NAME}_BIN
                  RELATIVE ${_BASE_INSTALL_DIR}
                  ${_BASE_INSTALL_DIR}/bin/*)


FOREACH(_BIN_ELEM ${_${PROJECT_NAME}_BIN})

  STRING(REGEX REPLACE /[^/]*$ "" _INST_PATH ${_BIN_ELEM})

  SET(_ELEM_COMPONENT development_tools)

  IF(${_BIN_ELEM} MATCHES bin/app.*$)
    SET(_ELEM_COMPONENT apps)
  ELSEIF(${_BIN_ELEM} MATCHES bin/debug/app.*$)
    SET(_ELEM_COMPONENT apps_debug)
  ENDIF()

#  MESSAGE("BIN : ${_BIN_ELEM} ${_ELEM_COMPONENT} ${_INST_PATH}")

  INSTALL(FILES ${_BASE_INSTALL_DIR}/${_BIN_ELEM}
                DESTINATION ${_INST_PATH}
                PERMISSIONS OWNER_WRITE OWNER_READ
                            GROUP_READ
                            WORLD_READ
                COMPONENT ${_ELEM_COMPONENT})
 
ENDFOREACH()


################
# share 
################

FILE(GLOB_RECURSE _${PROJECT_NAME}_SHARE
                  RELATIVE ${_BASE_INSTALL_DIR}
                  ${_BASE_INSTALL_DIR}/share/*)

#MESSAGE("SHARE IN : ${_${PROJECT_NAME}_SHARE}")

FOREACH(_SHARE_ELEM ${_${PROJECT_NAME}_SHARE})

  STRING(REGEX REPLACE /[^/]*$ "" _INST_PATH ${_SHARE_ELEM})

  SET(_ELEM_COMPONENT Unknown)

  IF(NOT ${_INST_PATH} MATCHES /Packaging)

    IF(${_INST_PATH} MATCHES /cmake)
      SET(_ELEM_COMPONENT development_config)
    ENDIF()

    IF(${_INST_PATH} MATCHES /share/doc)
      SET(_ELEM_COMPONENT libraries)
    ENDIF()

    IF(${_INST_PATH} MATCHES /Doc)
      SET(_ELEM_COMPONENT doc)
    ENDIF()

    IF(${_INST_PATH} MATCHES /Doc$)
      SET(BASE_DOC_DIR ${_INST_PATH})
    ENDIF()

    IF(${_INST_PATH} MATCHES /Examples/)
      IF(${_INST_PATH} MATCHES /bin$)
        SET(_ELEM_COMPONENT examples_rel)
      ELSEIF(${_INST_PATH} MATCHES /bin/debug$)
        SET(_ELEM_COMPONENT examples_debug)
      ELSEIF(${_INST_PATH} MATCHES /CSM/)
        SET(_ELEM_COMPONENT app_data)
      ELSE()
        SET(_ELEM_COMPONENT example_projects)
      ENDIF()
    ENDIF()

#    MESSAGE("SHARE : ${_SHARE_ELEM} ${_ELEM_COMPONENT} ${_INST_PATH}")

    INSTALL(FILES ${_BASE_INSTALL_DIR}/${_SHARE_ELEM}
                  DESTINATION ${_INST_PATH}
                  PERMISSIONS OWNER_WRITE OWNER_READ
                              GROUP_READ
                              WORLD_READ
                  COMPONENT ${_ELEM_COMPONENT})
  ENDIF()
 
ENDFOREACH()



STRING(REGEX REPLACE ".*\\.(fc[1-9][0-9])\\..*" "\\1" 
             _OSG_FC_VERSION ${CMAKE_SYSTEM_VERSION})

STRING(REGEX REPLACE ".*\\.(el[1-9])\\..*" "\\1" 
             _OSG_CO_VERSION ${CMAKE_SYSTEM_VERSION})

SET(OSG_HOST_SYSTEM_NAME ${CMAKE_HOST_SYSTEM_NAME})

IF(NOT _OSG_FC_VERSION STREQUAL ${CMAKE_SYSTEM_VERSION})
  SET(OSG_HOST_SYSTEM_NAME ${_OSG_FC_VERSION})
ENDIF()

IF(NOT _OSG_CO_VERSION STREQUAL ${CMAKE_SYSTEM_VERSION})
  SET(OSG_HOST_SYSTEM_NAME ${_OSG_CO_VERSION})
ENDIF()

IF(EXISTS "/etc/os-release" AND OSG_HOST_SYSTEM_NAME STREQUAL ${CMAKE_HOST_SYSTEM_NAME})
  FILE(READ "/etc/os-release" _OSG_OSRELEASE_CONTENTS)

  STRING(REGEX REPLACE ".*^NAME=\"([^\"]*)\".*" "\\1" _OSG_OSNAME "${_OSG_OSRELEASE_CONTENTS}")
  STRING(REGEX REPLACE ".*VERSION_ID=\"([^\"]*)\".*" "\\1" _OSG_OSVERSION "${_OSG_OSRELEASE_CONTENTS}")
  STRING(TOLOWER ${_OSG_OSNAME} _OSG_OSNAME)
  STRING(REGEX REPLACE "([0-9][0-9])\\.([0-9][0-9])" "\\1" _OSG_OSMAJOR ${_OSG_OSVERSION})
  STRING(REGEX REPLACE "([0-9][0-9])\\.([0-9][0-9])" "\\2" _OSG_OSMINOR ${_OSG_OSVERSION})

  SET(OSG_HOST_SYSTEM_NAME "0${_OSG_OSNAME}1_${_OSG_OSMAJOR}_${_OSG_OSMINOR}")
ENDIF()

SET(SYSTEM_SPEC ${OSG_HOST_SYSTEM_NAME}.${CMAKE_HOST_SYSTEM_PROCESSOR})


SET(CPACK_PACKAGE_NAME                "OpenSG")
SET(CPACK_PACKAGE_VERSION             @OSG_VERSION@)
SET(CPACK_PACKAGE_VERSION_MAJOR       @OSG_VERSION_MAJOR@)
SET(CPACK_PACKAGE_VERSION_MINOR       @OSG_VERSION_MINOR@)
SET(CPACK_PACKAGE_VERSION_PATCH       @OSG_VERSION_PATCH@)
SET(CPACK_PACKAGE_VENDOR              "OpenSG")
SET(CPACK_PACKAGE_CONTACT             "Dirk Reiners <dirk@www.opensg.org>")
SET(CPACK_PACKAGE_DESCRIPTION_SUMMARY "OpenSG provides the OpenSG scene graph system")
SET(CPACK_RESOURCE_FILE_LICENSE       "${_BASE_INSTALL_DIR}/share/doc/OpenSG/COPYING")

SET(CPACK_COMPONENTS_GROUPING ONE_PER_GROUP)

IF(NOT OSG_SINGLE_PACKAGE)
  SET(CPACK_ARCHIVE_COMPONENT_INSTALL ON)
  SET(CPACK_RPM_COMPONENT_INSTALL     ON)
ENDIF()

# Date macro by Benoit RAT (www.neub.co.nr)
MACRO (TODAY RESULT)
  IF (WIN32)
    EXECUTE_PROCESS(COMMAND "date /T" OUTPUT_VARIABLE ${RESULT})
    string(REGEX REPLACE "(..)/(..)/..(..).*" "\\3\\2\\1" "${RESULT}" "${${RESULT}}")
  ELSEIF(UNIX)
    EXECUTE_PROCESS(COMMAND "date" "+%d_%m_%Y" OUTPUT_VARIABLE ${RESULT})
#    string(REGEX REPLACE "(..)_(..)_..(..).*" "\\1_\\2_\\3" "${RESULT}" "${${RESULT}}")
    string(REGEX REPLACE "\n" "" "${RESULT}" "${${RESULT}}")
  ELSE (WIN32)
    MESSAGE(SEND_ERROR "date not implemented")
    SET(${RESULT} 000000)
  ENDIF (WIN32)
ENDMACRO (TODAY)

IF(OSG_BUILD_DATE)
  SET(DATE ${OSG_BUILD_DATE})
ELSE()
  TODAY(DATE)
ENDIF()

SET(CPACK_PACKAGE_FILE_NAME           "OpenSG.@OSG_VERSION@.${DATE}.${SYSTEM_SPEC}")

#MESSAGE("CPFN : ${CPACK_PACKAGE_FILE_NAME}")

# Determine package type
IF(NOT OSGBUILD_PACKAGE_TYPE OR OSGBUILD_PACKAGE_TYPE STREQUAL "")
  IF(WIN32)
    SET(OSGBUILD_PACKAGE_TYPE "ZIP")
  ELSE(WIN32)
    SET(OSGBUILD_PACKAGE_TYPE "TBZ2")
  ENDIF(WIN32)
ENDIF(NOT OSGBUILD_PACKAGE_TYPE OR OSGBUILD_PACKAGE_TYPE STREQUAL "")

STRING(TOUPPER ${OSGBUILD_PACKAGE_TYPE} CPACK_GENERATOR)

SET(CPACK_COMPONENTS_ALL libraries
                         libraries_debug

                         headers
                         development_tools
                         
                         python
                         python_debug

                         apps
                         app_data
                         apps_debug

#doc

                        examples_rel
                        examples_debug
                        example_projects)

SET(CPACK_COMPONENT_GROUP_RUNTIME_DESCRIPTION        "Suport Files needed to execute software with OpenSG.")
SET(CPACK_COMPONENT_GROUP_DEVEL_DESCRIPTION          "Development files needed to develop software with OpenSG.")
SET(CPACK_COMPONENT_GROUP_PYTHONDEBUG_DESCRIPTION    "Development files needed to debug OpenSG bindings.")
SET(CPACK_COMPONENT_GROUP_EXAMPLES_DESCRIPTION       "Development Examples files needed to develop software with OpenSG.")

SET(CPACK_COMPONENT_LIBRARIES_DISPLAY_NAME           "Release Runtime Libs")
SET(CPACK_COMPONENT_LIBRARIES_DESCRIPTION            "Release Runtime Libraries Description")
SET(CPACK_COMPONENT_LIBRARIES_GROUP                  "runtime")
SET(CPACK_COMPONENT_LIBRARIES_INSTALL_TYPES          Full Developer Runtime)

SET(CPACK_COMPONENT_APPS_DISPLAY_NAME                "Release Runtime Apps")
SET(CPACK_COMPONENT_APPS_DESCRIPTION                 "Release Runtime Apps Description")
SET(CPACK_COMPONENT_APPS_GROUP                       "runtime")
SET(CPACK_COMPONENT_APPS_INSTALL_TYPES               Full Developer Runtime)

SET(CPACK_COMPONENT_APP_DATA_DISPLAY_NAME            "Release Runtime App Data")
SET(CPACK_COMPONENT_APP_DATA_DESCRIPTION             "Release Runtime App Data Description")
SET(CPACK_COMPONENT_APP_DATA_GROUP                   "runtime")
SET(CPACK_COMPONENT_APP_DATA_INSTALL_TYPES           Full Developer Runtime)

SET(CPACK_COMPONENT_PYHTON_DISPLAY_NAME              "Release Runtime Python")
SET(CPACK_COMPONENT_PYTHON_DESCRIPTION               "Release Runtime Python Description")
SET(CPACK_COMPONENT_PYTHON_GROUP                     "runtime")
SET(CPACK_COMPONENT_PYTHON_INSTALL_TYPES             Full Developer Runtime)

SET(CPACK_COMPONENT_LIBRARIES_DEBUG_DISPLAY_NAME     "Debug Runtime Libs")
SET(CPACK_COMPONENT_LIBRARIES_DEBUG_DESCRIPTION      "Debug Runtimes Libraries Description")
SET(CPACK_COMPONENT_LIBRARIES_DEBUG_GROUP            "devel")
SET(CPACK_COMPONENT_LIBRARIES_DEBUG_INSTALL_TYPES    Full Developer Runtime)

SET(CPACK_COMPONENT_APPS_DEBUG_DISPLAY_NAME          "Debug Runtime Apps")
SET(CPACK_COMPONENT_APPS_DEBUG_DESCRIPTION           "Debug Runtimes Apps Description")
SET(CPACK_COMPONENT_APPS_DEBUG_GROUP                 "devel")
SET(CPACK_COMPONENT_APPS_DEBUG_INSTALL_TYPES         Full Developer Runtime)

SET(CPACK_COMPONENT_PYTHON_DEBUG_DISPLAY_NAME        "Debug Runtime Python")
SET(CPACK_COMPONENT_PYTHON_DEBUG_DESCRIPTION         "Debug Runtimes Python Description")
SET(CPACK_COMPONENT_PYTHON_DEBUG_GROUP               "pythondebug")
SET(CPACK_COMPONENT_PYTHON_DEBUG_INSTALL_TYPES       Full Developer Runtime)

SET(CPACK_COMPONENT_HEADERS_DISPLAY_NAME             "Headers")
SET(CPACK_COMPONENT_HEADERS_DESCRIPTION              "Headers Description")
SET(CPACK_COMPONENT_HEADERS_GROUP                    "devel")
SET(CPACK_COMPONENT_HEADER_INSTALL_TYPES             Full Developer)

SET(CPACK_COMPONENT_DEVELOPMENT_TOOLS_DISPLAY_NAME   "Dev Tools")
SET(CPACK_COMPONENT_DEVELOPMENT_TOOLS_DESCRIPTION    "Dev Tools Description")
SET(CPACK_COMPONENT_DEVELOPMENT_TOOLS_GROUP          "devel")
SET(CPACK_COMPONENT_DEVELOPMENT_TOOLS_INSTALL_TYPES  Full Developer)


SET(CPACK_COMPONENT_EXAMPLES_REL_DISPLAY_NAME        "Examples")
SET(CPACK_COMPONENT_EXAMPLES_REL_DESCRIPTION         "Examples Description")
SET(CPACK_COMPONENT_EXAMPLES_REL_GROUP               "examples")
SET(CPACK_COMPONENT_EXAMPLES_REL_INSTALL_TYPES       Full Developer Runtime)

SET(CPACK_COMPONENT_EXAMPLES_DEBUG_DISPLAY_NAME      "Examples")
SET(CPACK_COMPONENT_EXAMPLES_DEBUG_DESCRIPTION       "Examples Description")
SET(CPACK_COMPONENT_EXAMPLES_DEBUG_GROUP             "examples")
SET(CPACK_COMPONENT_EXAMPLES_DEBUG_INSTALL_TYPES     Full Developer Runtime)

SET(CPACK_COMPONENT_EXAMPLE_PROJECTS_DISPLAY_NAME    "Examples")
SET(CPACK_COMPONENT_EXAMPLE_PROJECTS_DESCRIPTION     "Examples Description")
SET(CPACK_COMPONENT_EXAMPLE_PROJECTS_GROUP           "examples")
SET(CPACK_COMPONENT_EXAMPLE_PROJECTS_INSTALL_TYPES   Full Developer Runtime)


IF(CPACK_GENERATOR STREQUAL "RPM")
  SET(CPACK_RPM_PACKAGE_NAME ${CPACK_PACKAGE_NAME})
  SET(CPACK_RPM_PACKAGE_REQUIRES "OpenSGSupport-runtime >= 2.0.0, boost >= 1.46.0, expat >= 2.1.0, libxml2 >= 2.7.8, zlib >= 1.2.5")
  SET(CPACK_RPM_devel_PACKAGE_REQUIRES "OpenSG-runtime >= 2.0.0, OpenSG-devel >= 2.0.0 boost-devel >= 1.46.0, expat-devel >= 2.1.0, libxml2-devel >= 2.7.8, zlib-devel >= 1.2.5")
  SET(CPACK_PACKAGING_INSTALL_PREFIX    "/usr/local")

  SET(CPACK_RPM_PACKAGE_LICENSE "LGPL v2, except some contrib packages, check <install_root>/share/doc/OpenSG")
ENDIF()

INCLUDE(CPack)

